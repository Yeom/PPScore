EDAS_NNP :_: Providing_VBG an_DT Environment_NN for_IN Decentralized_NNP Adaptive_NNP Services_NNPS Rdiger_NNP Kapitza_NNP Dept_NNP ._.
of_IN Comp_NNP ._.
Sciences_NNPS ,_, Informatik_NNP #_# University_NNP of_IN Erlangen-Nrnberg_NNP rrkapitz_NN @_IN cs_NNS ._.
fau_NN ._.
de_IN Franz_NNP J_NNP ._.
Hauck_NNP Distributed_VBD Systems_NNP Laboratory_NNP University_NNP of_IN Ulm_NNP franz_NN ._.
hauck_NN @_SYM uni-ulm_JJ ._.
de_IN ABSTRACT_NN As_IN the_DT idea_NN of_IN virtualisation_NN of_IN compute_VB power_NN ,_, storage_NN and_CC bandwidth_NN becomes_VBZ more_JJR and_CC more_RBR important_JJ ,_, grid_NN computing_NN evolves_VBZ and_CC is_VBZ applied_VBN to_TO a_DT rising_VBG number_NN of_IN applications_NNS ._.
The_DT environment_NN for_IN decentralized_VBN adaptive_JJ services_NNS -LRB-_-LRB- EDAS_NNS -RRB-_-RRB- provides_VBZ a_DT grid-like_JJ infrastructure_NN for_IN user-accessed_JJ ,_, longterm_JJ services_NNS -LRB-_-LRB- e_LS ._.
g_NN ._.
webserver_NN ,_, source-code_JJ repository_JJ etc_NN ._. -RRB-_-RRB- ._.
It_PRP aims_VBZ at_IN supporting_VBG the_DT autonomous_JJ execution_NN and_CC evolution_NN of_IN services_NNS in_IN terms_NNS of_IN scalability_NN and_CC resource-aware_JJ distribution_NN ._.
EDAS_NNS offers_NNS flexible_JJ service_NN models_NNS based_VBN on_IN distributed_VBN mobile_JJ objects_NNS ranging_VBG from_IN a_DT traditional_JJ clientserver_NN scenario_NN to_TO a_DT fully_RB peer-to-peer_JJ based_VBN approach_NN ._.
Automatic_NNP ,_, dynamic_JJ resource_NN management_NN allows_VBZ optimized_VBN use_NN of_IN available_JJ resources_NNS while_IN minimizing_VBG the_DT administrative_JJ complexity_NN ._.
Categories_NNS and_CC Subject_NNP Descriptors_NNPS C_NNP ._.
#_# ._.
#_# -LSB-_-LRB- Computer_NNP Communication_NNP Networks_NNP -RSB-_-RRB- :_: Distributed_VBN Systems-Distributed_JJ applications_NNS ;_: D_NN ._.
#_# ._.
12b_NN -LSB-_-LRB- Software_NNP -RSB-_-RRB- :_: Software_NNP Engineering_NNP Interoperability_NNP -LSB-_-LRB- Distributed_VBN objects_NNS -RSB-_-RRB- General_NNP Terms_NNS Design_NN ,_, Management_NN 1_CD ._.
INTRODUCTION_NNP Infrastructures_NNPS for_IN grid_NN computing_NN aim_NN at_IN virtualizing_VBG a_DT group_NN of_IN computers_NNS ,_, servers_NNS ,_, and_CC storage_NN as_IN one_CD large_JJ computing_NN system_NN ._.
Resource_NNP management_NN is_VBZ a_DT key_JJ issue_NN in_IN such_JJ systems_NNS ,_, needed_VBN for_IN an_DT efficient_JJ and_CC automated_JJ distribution_NN of_IN tasks_NNS on_IN the_DT grid_NN ._.
Such_JJ grid_NN infrastructures_NNS are_VBP often_RB deployed_VBN at_IN enterprise_NN level_NN ,_, but_CC projects_NNS like_IN SETI_NNP @_IN home_NN -LSB-_-LRB- #_# -RSB-_-RRB- have_VBP demonstrated_VBN the_DT feasibility_NN of_IN more_JJR decentralized_JJ grids_NNS as_RB well_RB ._.
Current_JJ grid_NN computing_NN infrastructures_NNS don_VBP ''_'' t_NN provide_VBP sufficient_JJ support_NN for_IN the_DT execution_NN of_IN distributed_VBN ,_, useraccessed_JJ ,_, long-term_JJ services_NNS as_IN they_PRP are_VBP designed_VBN to_TO solve_VB compute_VB -_: or_CC data-intensive_JJ tasks_NNS with_IN a_DT more_RBR or_CC less_RBR fixed_JJ set_NN of_IN parameters_NNS ._.
The_DT common_JJ three-phase_JJ approach_NN of_IN resource_NN discovery_NN ,_, system_NN selection_NN and_CC job_NN execution_NN fails_VBZ for_IN services_NNS that_WDT change_VBP their_PRP$ resource_NN demand_NN over_IN time_NN due_JJ to_TO interactive_JJ user_NN access_NN and_CC run_VB for_IN a_DT long_JJ period_NN of_IN time_NN ._.
Instead_RB an_DT infrastructure_NN for_IN long-term_JJ services_NNS has_VBZ to_TO place_VB services_NNS based_VBN on_IN their_PRP$ current_JJ demand_NN and_CC their_PRP$ estimated_VBN future_JJ requirements_NNS ._.
If_IN the_DT distribution_NN turns_VBZ out_RP to_TO be_VB wrong_JJ -LRB-_-LRB- e_LS ._.
g_NN ._.
a_DT node_NN gets_VBZ overloaded_VBN -RRB-_-RRB- the_DT service_NN has_VBZ to_TO be_VB migrated_VBN within_IN the_DT grid_NN -LRB-_-LRB- e_LS ._.
g_NN ._.
to_TO a_DT more_RBR powerful_JJ and_CC less_RBR loaded_JJ node_NN -RRB-_-RRB- ._.
Migration_NN however_RB is_VBZ expensive_JJ as_IN the_DT whole_JJ state_NN of_IN a_DT service_NN has_VBZ to_TO be_VB transfered_VBN ._.
Additionally_RB a_DT non-replicated_JJ service_NN is_VBZ not_RB accessible_JJ during_IN migration_NN ._.
Therefore_RB the_DT resource_NN management_NN has_VBZ to_TO avoid_VB migration_NN if_IN possible_JJ ._.
Furthermore_RB a_DT service_NN concept_NN has_VBZ to_TO be_VB provided_VBN that_IN evades_VBZ overload_NN in_IN the_DT first_JJ place_NN ,_, and_CC secondly_RB inhibits_VBZ service_NN unavailability_NN if_IN migration_NN can_MD ''_'' t_NN be_VB avoided_VBN ._.
EDAS_NN -LSB-_-LRB- #_# -RSB-_-RRB- aims_VBZ at_IN providing_VBG a_DT grid-like_JJ infrastructure_NN for_IN user-accessed_JJ ,_, long-term_JJ services_NNS that_WDT allows_VBZ the_DT dynamic_JJ adaptation_NN at_IN run-time_NN ,_, provides_VBZ a_DT management_NN infrastructure_NN ,_, and_CC offers_VBZ system-level_JJ support_NN for_IN scalability_NN and_CC fault_NN tolerance_NN ._.
Nodes_NNS can_MD dynamically_RB join_VB and_CC leave_VB the_DT infrastructure_NN ,_, and_CC all_DT management_NN tasks_NNS ,_, especially_RB the_DT resource_NN management_NN ,_, are_VBP decentralized_VBN ._.
The_DT environment_NN is_VBZ built_VBN upon_IN our_PRP$ AspectIX_NN -LSB-_-LRB- #_# -RSB-_-RRB- middleware_JJ infrastructure_NN ,_, which_WDT directly_RB supports_VBZ QoS-based_JJ ,_, dynamic_JJ reconfiguration_NN of_IN services_NNS ._.
The_DT resource_NN management_NN focuses_VBZ on_IN the_DT execution_NN of_IN services_NNS that_WDT have_VBP a_DT long_RB ,_, potentially_RB infinite_JJ ,_, operating_VBG time_NN ._.
Theses_NNS services_NNS are_VBP organized_VBN in_IN projects_NNS ._.
Each_DT project_NN has_VBZ a_DT distributed_VBN execution_NN scope_NN called_VBD a_DT service_NN environment_NN ._.
Such_PDT an_DT environment_NN possibly_RB spans_VBZ multiple_JJ institutions_NNS ._.
Each_DT institution_NN represents_VBZ an_DT administrative_JJ domain_NN that_WDT can_MD support_VB a_DT project_NN with_IN a_DT fixed_VBN set_NN of_IN resources_NNS ._.
Our_PRP$ approach_NN supports_VBZ the_DT adaptive_JJ resource_NN management_NN of_IN all_DT projects_NNS in_IN scope_NN of_IN an_DT institution_NN based_VBN on_IN an_DT algorithm_NN inspired_VBN by_IN the_DT diffusive_JJ algorithms_NNS for_IN decentralized_VBN loadbalancing_VBG -LSB-_-LRB- #_# -RSB-_-RRB- ._.
It_PRP is_VBZ not_RB known_VBN how_WRB to_TO optimally_RB subdivide_VB these_DT resources_NNS for_IN the_DT services_NNS as_IN the_DT resource_NN demand_NN of_IN services_NNS can_MD change_VB over_IN time_NN or_CC even_RB frequently_RB fluctuate_VBP ._.
To_TO provide_VB resources_NNS as_IN needed_VBN ,_, our_PRP$ approach_NN automatically_RB rededicates_VBZ evenly_RB free_JJ or_CC not_RB needed_VBN resources_NNS between_IN service_NN instances_NNS across_IN projects_NNS and_CC nodes_NNS ._.
The_DT whole_JJ process_NN Article_NNP #_# of_IN rededication_NN is_VBZ scalable_JJ as_IN it_PRP is_VBZ decentralized_VBN and_CC respects_VBZ certain_JJ limits_NNS like_IN the_DT physically_RB available_JJ resources_NNS of_IN a_DT node_NN and_CC the_DT amount_NN of_IN resources_NNS dedicated_VBN to_TO a_DT project_NN ._.
In_IN cases_NNS where_WRB rededication_NN is_VBZ not_RB possible_JJ ,_, the_DT migration_NN of_IN the_DT demanding_VBG service_NN is_VBZ initiated_VBN ._.
EDAS_NNS further_RB supports_VBZ flexible_JJ service_NN models_NNS ,_, including_VBG a_DT fully_RB centralized_VBN client_NN /_: server_NN structure_NN ,_, completely_RB peer-topeer_JJ based_VBN systems_NNS ,_, and_CC various_JJ configurations_NNS in_IN between_IN that_DT allow_VBP a_DT controlled_JJ use_NN of_IN peer_VB resources_NNS based_VBN on_IN the_DT fragmented_JJ object_NN model_NN -LSB-_-LRB- #_# -RSB-_-RRB- ._.
The_DT overall_JJ goal_NN is_VBZ to_TO provide_VB a_DT generic_JJ service_NN architecture_NN that_WDT allows_VBZ to_TO implement_VB the_DT service_NN functionality_NN once_RB ,_, and_CC then_RB ,_, ideally_RB ,_, run_VB this_DT service_NN with_IN different_JJ service_NN models_NNS and_CC adapt_VB it_PRP at_IN run-time_NN ,_, thereby_RB scaling_VBG from_IN a_DT single_JJ user_NN local_JJ instance_NN to_TO a_DT multidomain-spanning_JJ scalable_JJ service_NN ._.
To_TO reduce_VB the_DT implementation_NN effort_NN of_IN such_JJ services_NNS a_DT framework_NN has_VBZ been_VBN developed_VBN that_IN supports_VBZ the_DT run-time_JJ evolution_NN from_IN a_DT traditional_JJ client_NN /_: server_NN scenario_NN to_TO an_DT active_JJ replicated_VBN server_NN with_IN clients_NNS interacting_VBG in_IN a_DT hybrid_NN peer-to-peer_NN architecture_NN as_IN known_VBN from_IN Napster_NNP ._.
In_IN a_DT longterm-service_JJ grid_NN infrastructure_NN ,_, active_JJ replication_NN has_VBZ various_JJ benefits_NNS :_: Replicas_NNS can_MD join_VB and_CC leave_VB the_DT object_NN group_NN and_CC therefore_RB replicas_NNS can_MD be_VB migrated_VBN without_IN service_NN unavailability_NN ._.
Load_NN of_IN non-modifying_JJ requests_NNS can_MD be_VB evenly_RB distributed_VBN across_IN the_DT replicas_NNS making_VBG overload_NN situations_NNS less_RBR likely_JJ ._.
Finally_RB a_DT certain_JJ amount_NN of_IN node_NN crashes_NNS can_MD be_VB tolerated_VBN ._.
The_DT following_VBG section_NN describes_VBZ the_DT used_VBN features_NNS of_IN AspectIX_NN followed_VBN by_IN a_DT brief_JJ overview_NN of_IN the_DT core_NN components_NNS and_CC concepts_NNS of_IN EDAS_NNS ._.
Section_NN #_# explains_VBZ the_DT self-managing_JJ and_CC rededication_NN concepts_NNS of_IN distributed_VBN adaptive_JJ resource_NN management_NN ._.
Section_NN #_# describes_VBZ the_DT framework_NN for_IN decentralized_VBN adaptive_JJ services_NNS ._.
Section_NN #_# describes_VBZ related_JJ work_NN and_CC finally_RB Section_NN #_# concludes_VBZ the_DT paper_NN ._.
2_LS ._.
BASIC_JJ MIDDLEWARE_NN The_DT EDAS_NN environment_NN is_VBZ based_VBN on_IN the_DT AspectIX_NN middleware_NN ._.
At_IN its_PRP$ core_NN ,_, it_PRP provides_VBZ a_DT CORBA-compliant_JJ ORB_NN and_CC ,_, as_IN such_JJ ,_, supports_VBZ heterogeneous_JJ distributed_VBN systems_NNS ._.
Furthermore_RB AspectIX_NN supports_VBZ the_DT fragmented_JJ object_NN model_NN -LSB-_-LRB- #_# -RSB-_-RRB- that_WDT is_VBZ used_VBN to_TO implement_VB and_CC provide_VB decentralized_JJ adaptive_JJ services_NNS ._.
In_IN the_DT fragmented_JJ object_NN model_NN ,_, the_DT distinction_NN between_IN client_NN stubs_NNS and_CC the_DT server_NN object_NN is_VBZ no_RB longer_RB present_JJ -LRB-_-LRB- Fig_NN ._.
1_LS -RRB-_-RRB- ._.
From_IN an_DT abstract_JJ point_NN of_IN view_NN ,_, a_DT fragmented_JJ object_NN is_VBZ a_DT unit_NN with_IN unique_JJ identity_NN ,_, interface_NN ,_, behavior_NN ,_, and_CC state_NN ,_, like_IN in_IN classic_JJ object-oriented_JJ design_NN ._.
The_DT implementation_NN of_IN these_DT properties_NNS however_RB is_VBZ not_RB bound_VBN to_TO a_DT specific_JJ location_NN ,_, but_CC may_MD be_VB distributed_VBN arbitrarily_RB on_IN various_JJ fragments_NNS ._.
Any_DT client_NN that_WDT wants_VBZ to_TO access_VB the_DT fragmented_JJ object_NN needs_VBZ a_DT local_JJ fragment_NN ,_, which_WDT provides_VBZ an_DT interface_NN identical_JJ to_TO that_DT of_IN a_DT traditional_JJ stub_NN ._.
However_RB internal_JJ distribution_NN and_CC interaction_NN is_VBZ not_RB only_RB transparent_JJ on_IN the_DT outer_JJ interface_NN of_IN the_DT distributed_VBN object_NN ,_, but_CC may_MD even_RB change_VB dynamically_RB at_IN runtime_NN ._.
This_DT allows_VBZ the_DT fragmented_JJ object_NN model_NN to_TO adapt_VB to_TO changing_VBG environment_NN conditions_NNS or_CC quality_NN of_IN service_NN requirements_NNS ._.
It_PRP offers_VBZ to_TO change_VB the_DT service_NN model_NN on_IN demand_NN from_IN traditional_JJ client-server_NN to_TO a_DT peer-to-peer_NN based_VBN approach_NN and_CC all_DT kind_NN of_IN intermediate_JJ stages_NNS by_IN migration_NN and_CC exchanging_VBG of_IN fragments_NNS ._.
3_LS ._.
EDAS_NNP CORE_NNP COMPONENTS_NNP Figure_NNP #_# :_: Fragmented_JJ object_NN on_IN three_CD nodes_NNS EDAS_NNP has_VBZ three_CD major_JJ components_NNS :_: Every_DT node_NN that_WDT actively_RB supports_VBZ decentralized_VBN adaptive_JJ services_NNS provides_VBZ a_DT home_NN environment_NN ._.
The_DT home_NN environment_NN basically_RB manages_VBZ resources_NNS of_IN one_CD or_CC more_JJR nodes_NNS belonging_VBG to_TO the_DT same_JJ administrative_JJ domain_NN or_CC institution_NN ._.
The_DT service_NN environment_NN is_VBZ spread_VBN over_IN a_DT set_NN of_IN domains_NNS that_WDT support_VBP a_DT certain_JJ project_NN and_CC relies_VBZ on_IN basic_JJ services_NNS from_IN the_DT corresponding_JJ home_NN environments_NNS ._.
The_DT service_NN environment_NN supports_VBZ the_DT execution_NN of_IN services_NNS belonging_VBG to_TO the_DT same_JJ project_NN ._.
Finally_RB ,_, the_DT decentralized_VBN adaptive_JJ service_NN is_VBZ dynamically_RB distributed_VBN within_IN the_DT scope_NN of_IN an_DT associated_JJ service_NN environment_NN ._.
The_DT home_NN environment_NN has_VBZ the_DT role_NN of_IN a_DT mediator_NN between_IN the_DT nodes_NNS of_IN an_DT institution_NN and_CC one_CD or_CC more_JJR service_NN environments_NNS ,_, each_DT running_VBG a_DT set_NN of_IN services_NNS ._.
Fig_NN ._.
#_# shows_VBZ three_CD domains_NNS each_DT running_VBG a_DT home_NN environment_NN that_WDT spans_VBZ all_DT nodes_NNS of_IN the_DT respective_JJ domains_NNS ._.
Every_DT node_NN provides_VBZ a_DT set_NN of_IN resources_NNS ._.
Each_DT domain_NN has_VBZ a_DT manager_NN who_WP can_MD use_VB that_IN home_NN environment_NN to_TO assign_VB resources_NNS to_TO service_NN environments_NNS and_CC to_TO revoke_VB them_PRP ._.
Apart_RB from_IN providing_VBG system_NN load_NN and_CC all_DT kinds_NNS of_IN resource-usage_JJ information_NN to_TO the_DT service_NN environment_NN ,_, the_DT home_NN environment_NN also_RB notifies_VBZ about_IN all_DT important_JJ system_NN events_NNS like_IN a_DT node_NN shutdown_NN or_CC crash_NN ._.
A_DT service_NN environment_NN represents_VBZ a_DT scope_NN of_IN distribution_NN for_IN one_CD or_CC more_JJR services_NNS ._.
Usually_RB ,_, a_DT service_NN environment_NN is_VBZ owned_VBN by_IN one_CD organization_NN or_CC community_NN and_CC dedicated_VBN to_TO one_CD project_NN ._.
A_DT service_NN manager_NN can_MD start_VB ,_, stop_VB ,_, and_CC configure_VB services_NNS through_IN the_DT interface_NN of_IN the_DT service_NN environment_NN and_CC decides_VBZ which_WDT resources_NNS provided_VBN by_IN home_NN environments_NNS are_VBP accepted_VBN ._.
In_IN most_JJS cases_NNS a_DT service_NN environment_NN is_VBZ spread_VBN over_IN more_JJR than_IN one_CD administrative_JJ domain_NN as_IN shown_VBN in_IN Fig_NN ._.
#_# ._.
One_CD of_IN the_DT main_JJ tasks_NNS of_IN the_DT service_NN environment_NN is_VBZ to_TO support_VB the_DT migration_NN of_IN services_NNS or_CC service_NN components_NNS especially_RB between_IN different_JJ home_NN environments_NNS ._.
The_DT service_NN environment_NN thereby_RB takes_VBZ available_JJ resources_NNS ,_, the_DT requirements_NNS of_IN the_DT services_NNS ,_, and_CC the_DT policies_NNS provided_VBN by_IN the_DT service_NN manager_NN into_IN account_NN ._.
The_DT migration_NN of_IN service_NN components_NNS can_MD be_VB necessary_JJ for_IN various_JJ reasons_NNS ,_, like_IN node_NN shutdown_NN ,_, resource_NN constraints_NNS ,_, and_CC the_DT growth_NN or_CC shrinkage_NN of_IN a_DT service_NN environment_NN ._.
4_LS ._.
DECENTRALIZED_JJ RESOURCEMANAGEMENT_NNP Resource_NNP management_NN for_IN long-term_JJ services_NNS has_VBZ other_JJ requirements_NNS than_IN resource_NN management_NN in_IN common_JJ grid_NN computing_NN environments_NNS ._.
For_IN instance_NN even_RB in_IN the_DT context_NN of_IN traditional_JJ grid_NN systems_NNS it_PRP is_VBZ very_RB difficult_JJ to_TO determine_VB or_CC even_RB only_RB estimate_VB the_DT resource_NN requirements_NNS of_IN a_DT task_NN -LSB-_-LRB- #_# -RSB-_-RRB- ._.
For_IN long-term_JJ services_NNS this_DT is_VBZ even_RB harder_RBR ,_, and_CC it_PRP is_VBZ likely_JJ that_IN the_DT resource_NN demand_NN frequently_RB changes_VBZ ._.
This_DT turns_VBZ Article_NNP #_# Host_NNP FHost_NNP D_NNP Host_NNP E_NNP Host_NNP A_NNP Host_NNP C_NNP Service_NNP Environment_NNP Service_NNP B_NNP Service_NNP A_NNP Home_NNP Env_NN ._.
Home_NNP Environment_NNP Home_NNP Environment_NNP Boundary_NNP of_IN the_DT fragmented_JJ object_NN Service_NNP Manager_NNP Domain_NN Manager_NNP Domain_NN Manager_NNP Figure_NNP #_# :_: EDAS_NNP Scenario_NN the_DT optimal_JJ distribution_NN of_IN services_NNS over_IN a_DT set_NN of_IN nodes_NNS into_IN a_DT difficult_JJ problem_NN ._.
In_IN general_JJ the_DT migration_NN of_IN services_NNS is_VBZ a_DT prerequisite_NN of_IN EDAS_NNP as_IN it_PRP offers_VBZ a_DT solution_NN if_IN the_DT initial_JJ distribution_NN decision_NN was_VBD wrong_JJ -LRB-_-LRB- e_LS ._.
g_NN ._.
initial_JJ start_NN of_IN previously_RB unknown_JJ service_NN -RRB-_-RRB- or_CC the_DT demand_NN of_IN services_NNS has_VBZ changed_VBN substantially_RB ._.
But_CC migration_NN is_VBZ costly_JJ ,_, since_IN the_DT whole_JJ state_NN of_IN a_DT service_NN possibly_RB including_VBG program_NN code_NN has_VBZ to_TO be_VB transfered_VBN ._.
If_IN the_DT service_NN is_VBZ not_RB replicated_VBN it_PRP will_MD be_VB unavailable_JJ during_IN migration_NN ._.
Taking_VBG this_DT into_IN account_NN a_DT resource_NN management_NN should_MD place_VB services_NNS and_CC adaptively_RB rededicate_VB resources_NNS between_IN services_NNS and_CC nodes_NNS as_IN needed_VBN to_TO prevent_VB migration_NN ._.
As_IN EDAS_NNP aims_VBZ at_IN providing_VBG a_DT grid-like_JJ infrastructure_NN for_IN a_DT large_JJ set_NN of_IN nodes_NNS that_WDT can_MD join_VB and_CC leave_VB the_DT system_NN all_DT resource_NN management_NN tasks_NNS have_VBP to_TO be_VB decentralized_VBN to_TO be_VB scalable_JJ and_CC should_MD not_RB require_VB global_JJ knowledge_NN ._.
The_DT resource_NN management_NN can_MD be_VB structured_VBN into_IN the_DT following_VBG different_JJ tasks_NNS :_: Adding_VBG and_CC changing_VBG the_DT assigned_VBN resources_NNS of_IN a_DT service_NN environment_NN Automatic_NNP placement_NN of_IN service_NN at_IN startup_NN time_NN and_CC during_IN migration_NN due_JJ to_TO overload_NN Keeping_VBG all_DT kind_NN of_IN resource_NN limits_NNS ,_, especially_RB the_DT limits_NNS of_IN service_NN environments_NNS Compensate_VBP leaving_VBG and_CC crashed_VBD nodes_NNS In_IN the_DT next_JJ sections_NNS we_PRP will_MD describe_VB what_WP kind_NN of_IN resource_NN limits_NNS there_EX are_VBP and_CC how_WRB to_TO do_VB resource_NN management_NN based_VBN on_IN these_DT basic_JJ conditions_NNS ._.
4_LS ._.
#_# Resource_NNP Limits_NNP Our_PRP$ approach_NN manages_VBZ resources_NNS on_IN two_CD stages_NNS ,_, the_DT node_NN level_NN and_CC the_DT service-environment_NN level_NN ._.
At_IN the_DT node_NN level_NN we_PRP monitor_VBP usage_NN of_IN all_DT kind_NN of_IN physical_JJ resources_NNS like_IN disk_NN space_NN ,_, memory_NN ,_, CPU_NNP and_CC network_NN bandwidth_NN but_CC also_RB logical_JJ ones_NNS like_IN open_JJ files_NNS ,_, sockets_NNS and_CC threads_NNS ._.
The_DT entity_NN of_IN monitoring_NN is_VBZ a_DT service_NN or_CC a_DT service_NN component_NN in_IN case_NN of_IN a_DT decentralized_VBN adaptive_JJ service_NN ._.
Every_DT service_NN has_VBZ so_RB called_VBN local_JJ limits_NNS that_WDT restrict_VBP the_DT resource_NN usage_NN in_IN context_NN of_IN the_DT current_JJ node_NN ._.
If_IN a_DT service_NN runs_VBZ the_DT risk_NN of_IN exceeding_VBG such_PDT a_DT local_JJ limit_NN the_DT home_NN environment_NN tries_VBZ to_TO extend_VB the_DT limits_NNS or_CC notifies_VBZ the_DT responsible_JJ service_NN environment_NN if_IN rededication_NN is_VBZ not_RB possible_JJ ._.
Reaching_VBG a_DT local_JJ limit_NN can_MD be_VB caused_VBN by_IN two_CD reasons_NNS :_: an_DT overloaded_JJ node_NN or_CC an_DT overloaded_JJ service_NN environment_NN ._.
In_IN the_DT first_JJ case_NN service_NN migration_NN might_MD help_VB ,_, in_IN the_DT second_JJ case_NN migration_NN to_TO another_DT administrative_JJ domain_NN might_MD be_VB an_DT option_NN ,_, or_CC simply_RB reducing_VBG resource_NN demand_NN by_IN stopping_VBG the_DT service_NN ._.
Of_IN course_NN there_RB could_MD be_VB more_JJR than_IN one_CD service_NN of_IN the_DT same_JJ service_NN environment_NN at_IN a_DT node_NN ._.
Therefore_RB the_DT assigned_VBN resources_NNS of_IN a_DT service_NN environment_NN at_IN a_DT node_NN can_MD be_VB easily_RB computed_VBN by_IN summing_VBG up_RP all_DT local_JJ limits_NNS of_IN its_PRP$ services_NNS ._.
Furthermore_RB each_DT node_NN has_VBZ node_NN limits_NNS that_WDT restrict_VBP the_DT overall_JJ usage_NN of_IN certain_JJ resources_NNS ._.
A_DT node_NN limit_NN must_MD never_RB exceed_VB the_DT physical_JJ resource_NN -LRB-_-LRB- e_LS ._.
g_NN ._.
disk_NN space_NN -RRB-_-RRB- of_IN a_DT node_NN and_CC might_MD be_VB much_RB smaller_JJR ,_, e_LS ._.
g_NN ._.
,_, for_IN supporting_VBG local_JJ users_NNS ._.
The_DT sum_NN of_IN all_DT local_JJ limits_NNS at_IN a_DT node_NN must_MD never_RB exceed_VB the_DT node_NN limit_NN of_IN a_DT resource_NN ._.
Therefore_RB observing_VBG and_CC controlling_VBG the_DT local_JJ limits_NNS will_MD keep_VB the_DT node_NN limits_NNS and_CC preventing_VBG overload_NN ._.
NodeLimitNode_NNP numberOfLocalLimitsNodeX_NNP i_FW =_JJ #_# LocalLimiti_NNP At_IN the_DT institution_NN level_NN the_DT resource_NN usage_NN of_IN a_DT service_NN environment_NN and_CC its_PRP$ associated_JJ services_NNS is_VBZ also_RB restricted_VBN by_IN so-called_JJ global_JJ limits_NNS ._.
These_DT limits_NNS determine_VBP the_DT maximum_NN resource_NN usage_NN of_IN a_DT project_NN in_IN scope_NN of_IN a_DT home_NN environment_NN ._.
The_DT sum_NN of_IN all_DT local_JJ limits_NNS on_IN all_DT nodes_NNS of_IN the_DT institution_NN for_IN a_DT certain_JJ project_NN therefore_RB never_RB exceeds_VBZ its_PRP$ global_JJ limit_NN ._.
GlobaleLimitSE_NN numberOfLocalLimitsSEX_NN i_FW =_JJ #_# LocalLimiti_NNP 4_CD ._.
#_# Adaptive_NNP Resource_NNP Rededication_NNP We_PRP start_VBP with_IN a_DT straight-forward_JJ implementation_NN to_TO describe_VB the_DT principal_JJ workflow_NN ._.
Then_RB we_PRP propose_VBP an_DT approach_NN for_IN a_DT more_RBR efficient_JJ solution_NN and_CC discuss_VB its_PRP$ problems_NNS ._.
If_IN a_DT new_JJ project_NN should_MD be_VB supported_VBN by_IN a_DT home_NN environment_NN it_PRP is_VBZ first_RB necessary_JJ to_TO identify_VB the_DT nodes_NNS that_WDT offer_VBP sufficient_JJ unassigned_JJ resources_NNS to_TO start_VB a_DT service_NN ._.
This_DT can_MD be_VB achieved_VBN in_IN a_DT naive_JJ implementation_NN by_IN using_VBG a_DT flooding_NN approach_NN like_IN it_PRP is_VBZ done_VBN by_IN the_DT Gnutella_NNP protocol_NN assuming_VBG the_DT nodes_NNS are_VBP connected_VBN in_IN a_DT random_JJ graph_NN ._.
These_DT resources_NNS then_RB can_MD be_VB assigned_VBN to_TO the_DT service_NN environment_NN of_IN the_DT new_JJ project_NN which_WDT further_RB on_IN can_MD start_VB services_NNS on_IN these_DT nodes_NNS ._.
Of_IN course_NN a_DT home_NN environment_NN supports_VBZ usually_RB numerous_JJ projects_NNS ._.
Each_DT of_IN these_DT projects_NNS has_VBZ resource_NN shares_NNS on_IN various_JJ nodes_NNS ,_, some_DT of_IN them_PRP occupied_VBN by_IN services_NNS ,_, other_JJ free_JJ and_CC unused_JJ ._.
As_IN the_DT resource_NN demand_NN of_IN a_DT service_NN changes_VBZ it_PRP might_MD be_VB possible_JJ that_IN a_DT service_NN reaches_VBZ its_PRP$ local_JJ limit_NN if_IN the_DT service_NN is_VBZ under_IN high_JJ demand_NN ._.
What_WP happens_VBZ next_JJ depends_VBZ on_IN the_DT overall_JJ resource_NN usage_NN of_IN the_DT service_NN environment_NN and_CC the_DT resource_NN consumption_NN at_IN the_DT local_JJ node_NN ._.
If_IN the_DT service_NN environment_NN has_VBZ not_RB reached_VBN its_PRP$ global_JJ limit_NN and_CC the_DT node_NN is_VBZ not_RB overloaded_VBN the_DT dependent_JJ local_JJ limit_NN of_IN the_DT service_NN should_MD be_VB extended_VBN simply_RB by_IN reducing_VBG a_DT local_JJ limit_NN at_IN another_DT node_NN of_IN the_DT same_JJ service_NN environment_NN ._.
When_WRB all_DT resources_NNS of_IN the_DT node_NN are_VBP assigned_VBN to_TO other_JJ service_NN environments_NNS there_EX are_VBP two_CD possibilities_NNS ._.
All_DT resources_NNS are_VBP used_VBN by_IN services_NNS ,_, so_IN we_PRP have_VBP to_TO migrate_VB a_DT service_NN ,_, or_CC the_DT resources_NNS are_VBP assigned_VBN but_CC not_RB used_VBN ._.
In_IN the_DT later_JJ case_NN we_PRP shall_MD rededicate_VB resources_NNS and_CC assign_VB them_PRP to_TO the_DT demanding_VBG service_NN environment_NN ._.
Finally_RB the_DT service_NN environment_NN might_MD have_VB reached_VBN its_PRP$ global_JJ limit_NN ._.
In_IN this_DT case_NN the_DT resource_NN consumption_NN has_VBZ to_TO be_VB reduced_VBN either_CC by_IN migrating_VBG the_DT service_NN to_TO another_DT domain_NN and_CC its_PRP$ depended_VBD home_NN environment_NN or_CC simply_RB by_IN bounding_VBG resource_NN usage_NN and_CC if_IN this_DT is_VBZ not_RB possible_JJ ,_, stopping_VBG the_DT service_NN ._.
In_IN contrary_JJ to_TO the_DT setup_NN of_IN a_DT new_JJ service_NN environment_NN which_WDT is_VBZ not_RB time_NN critical_JJ and_CC a_DT less_JJR frequent_JJ task_NN the_DT adaptation_NN of_IN local_JJ limits_NNS occurs_VBZ frequently_RB and_CC needs_VBZ to_TO be_VB done_VBN Article_NNP #_# almost_RB immediately_RB ._.
Thus_RB it_PRP is_VBZ not_RB an_DT option_NN to_TO use_VB broadcast_NN searches_NNS for_IN rededication_NN ._.
Instead_RB a_DT more_RBR efficient_JJ approach_NN with_IN a_DT bounded_VBN complexity_NN is_VBZ necessary_JJ ._.
The_DT same_JJ applies_VBZ for_IN detecting_VBG if_IN a_DT global_JJ limit_NN is_VBZ reached_VBN by_IN a_DT service_NN environment_NN ._.
Currently_RB we_PRP investigate_VBP if_IN this_DT can_MD be_VB achieved_VBN by_IN using_VBG a_DT diffusive_JJ algorithm_NN -LSB-_-LRB- #_# -RSB-_-RRB- like_IN it_PRP is_VBZ used_VBN for_IN decentralized_VBN load_NN balancing_NN ._.
Thereby_RB all_DT nodes_NNS of_IN a_DT system_NN are_VBP partitioned_VBN in_IN groups_NNS that_WDT overlap_VBP partially_RB ._.
The_DT union_NN of_IN all_DT groups_NNS achieves_VBZ a_DT full_JJ coverage_NN ._.
Group_NNP members_NNS frequently_RB exchange_VBP load_NN information_NN and_CC balance_NN the_DT load_NN by_IN migration_NN ._.
In_IN our_PRP$ case_NN we_PRP aim_VBP not_RB at_IN balancing_VBG the_DT load_NN but_CC the_DT amount_NN of_IN available_JJ free_JJ resources_NNS of_IN a_DT service_NN environment_NN ._.
Each_DT node_NN that_WDT supports_VBZ a_DT certain_JJ service_NN environment_NN is_VBZ at_IN least_JJS connected_VBN to_TO another_DT node_NN that_WDT supports_VBZ the_DT same_JJ project_NN ._.
This_DT way_NN it_PRP always_RB should_MD be_VB known_VBN if_IN a_DT service_NN environment_NN has_VBZ still_RB enough_JJ resources_NNS and_CC therefore_RB if_IN a_DT service_NN can_MD grow_VB ._.
There_EX still_RB remain_VBP open_JJ issues_NNS like_IN if_IN the_DT diffusively_JJ balanced_JJ free_JJ resources_NNS should_MD be_VB tightly_RB connected_VBN to_TO the_DT real_JJ resources_NNS ,_, comparable_JJ to_TO reservations_NNS ._.
In_IN this_DT case_NN there_RB might_MD be_VB problems_NNS if_IN a_DT node_NN supports_VBZ several_JJ service_NN environments_NNS which_WDT all_DT have_VBP services_NNS running_VBG at_IN the_DT node_NN and_CC a_DT node_NN limit_NN is_VBZ exceeded_VBN which_WDT would_MD require_VB service_NN migration_NN ._.
In_IN fact_NN it_PRP can_MD be_VB needless_JJ as_IN the_DT services_NNS might_MD not_RB use_VB all_PDT the_DT assigned_VBN resources_NNS but_CC the_DT diffusive_JJ algorithm_NN caused_VBD the_DT limit_NN overrun_VBN by_IN equally_RB balancing_VBG the_DT free_JJ resources_NNS of_IN all_DT supported_VBN service_NN environments_NNS ._.
If_IN we_PRP remove_VB the_DT mapping_NN between_IN free_JJ resources_NNS and_CC real_JJ resources_NNS of_IN a_DT node_NN we_PRP can_MD evade_VB these_DT situations_NNS ._.
However_RB it_PRP gets_VBZ more_RBR complicated_JJ to_TO determine_VB the_DT free_JJ and_CC unassigned_JJ resources_NNS of_IN a_DT home_NN environment_NN ._.
4_LS ._.
#_# Placement_NNP of_IN Services_NNPS Independent_NNP of_IN the_DT mapping_NN of_IN free_JJ resources_NNS the_DT placement_NN of_IN a_DT service_NN is_VBZ ,_, as_IN already_RB stated_VBN ,_, a_DT difficult_JJ problem_NN ._.
Distributing_VBG the_DT services_NNS equally_RB over_IN all_DT nodes_NNS would_MD surely_RB prevent_VB migration_NN in_IN the_DT average_JJ case_NN even_RB if_IN resource_NN demand_NN of_IN services_NNS changes_NNS ._.
However_RB if_IN the_DT resource_NN demand_NN of_IN services_NNS varies_VBZ highly_RB and_CC the_DT grid_NN is_VBZ clogged_VBN by_IN many_JJ projects_NNS it_PRP might_MD be_VB that_IN a_DT service_NN can_MD ''_'' t_NN be_VB placed_VBN because_IN the_DT free_JJ resources_NNS are_VBP too_RB scattered_VBN ._.
A_DT different_JJ approach_NN would_MD be_VB to_TO consider_VB it_PRP as_IN an_DT variant_NN of_IN the_DT bin-packing_JJ problem_NN that_WDT aims_VBZ at_IN packing_VBG items_NNS in_IN bins_NNS by_IN optimizing_VBG the_DT number_NN of_IN used_VBN bins_NNS ._.
In_IN our_PRP$ case_NN we_PRP need_VBP an_DT online_JJ approach_NN as_IN the_DT items_NNS are_VBP not_RB known_VBN in_IN advance_NN and_CC we_PRP have_VBP a_DT multi-dimensional_JJ problem_NN since_IN a_DT service_NN has_VBZ various_JJ resource_NN requirements_NNS ._.
The_DT number_NN of_IN bins_NNS is_VBZ bounded_VBN as_IN we_PRP have_VBP a_DT finite_JJ number_NN of_IN nodes_NNS in_IN our_PRP$ grid_NN ._.
An_DT algorithm_NN for_IN this_DT problem_NN has_VBZ recently_RB been_VBN proposed_VBN by_IN Epstein_NN and_CC van_NN Stee_NNP in_IN -LSB-_-LRB- #_# -RSB-_-RRB- ._.
On_IN the_DT downside_NN this_DT algorithm_NN needs_VBZ to_TO know_VB all_DT nodes_NNS and_CC their_PRP$ actual_JJ usage_NN ._.
As_IN the_DT placement_NN of_IN a_DT service_NN is_VBZ not_RB a_DT time_NN critical_JJ problem_NN again_RB a_DT flooding_NN based_VBN approach_NN might_MD offer_VB a_DT solution_NN ._.
To_TO reduce_VB the_DT number_NN of_IN answers_NNS only_RB nodes_NNS that_WDT provide_VBP sufficient_JJ resources_NNS need_VBP to_TO reply_VB ._.
It_PRP has_VBZ also_RB to_TO be_VB considered_VBN to_TO transform_VB the_DT algorithm_NN to_TO a_DT distributed_VBN one_CD ._.
Another_DT problem_NN might_MD be_VB that_IN the_DT algorithm_NN optimizes_VBZ the_DT occupancy_NN too_RB strong_JJ ._.
Therefore_RB demand_NN changes_NNS of_IN service_NN can_MD lead_VB to_TO overloaded_JJ nodes_NNS and_CC causing_VBG migration_NN ._.
We_PRP believe_VBP this_DT can_MD be_VB prevented_VBN by_IN not_RB only_RB considering_VBG the_DT actual_JJ resource_NN consumption_NN to_TO determine_VB the_DT resource_NN demand_NN of_IN a_DT service_NN but_CC taking_VBG the_DT previous_JJ demand_NN into_IN account_NN ._.
5_CD ._.
DECENTRALIZED_JJ ADAPTIVE_JJ SERVICE_NN MODEL_NN In_IN EDAS_NNS a_DT decentralized_VBN ,_, adaptive_JJ service_NN normally_RB matches_VBZ a_DT traditional_JJ service_NN accessed_VBN by_IN users_NNS like_IN a_DT web_NN server_NN ,_, an_DT instant_JJ messaging_NN server_NN or_CC a_DT source_NN code_NN repository_NN ._.
Such_PDT a_DT service_NN is_VBZ represented_VBN by_IN a_DT fragmented_JJ object_NN ._.
This_DT object_NN expands_VBZ or_CC shrinks_VBZ in_IN the_DT scope_NN spanned_VBN by_IN the_DT associated_JJ service_NN environment_NN depending_VBG on_IN the_DT service_NN demands_NNS and_CC for_IN fault-tolerance_JJ reasons_NNS ._.
Usually_RB every_DT part_NN of_IN the_DT object_NN is_VBZ mobile_JJ and_CC can_MD be_VB migrated_VBN if_IN necessary_JJ ._.
Each_DT service_NN has_VBZ at_IN least_JJS two_CD interfaces_NNS :_: one_CD for_IN management_NN tasks_NNS and_CC another_DT service_NN specific_JJ for_IN the_DT end_NN user_NN ._.
The_DT management_NN interface_NN offers_VBZ methods_NNS to_TO start_VB ,_, stop_VB ,_, and_CC configure_VB service_NN instances_NNS ._.
As_IN this_DT set_NN of_IN features_NNS requires_VBZ an_DT enormous_JJ implementation_NN effort_NN to_TO do_VB it_PRP anew_RB for_IN each_DT service_NN implementation_NN we_PRP support_VBP the_DT development_NN of_IN decentralized_VBN adaptive_JJ services_NNS through_IN a_DT framework_NN and_CC an_DT extended_VBN version_NN of_IN IDL_NNP in_IN combination_NN with_IN a_DT special_JJ IDL-compiler_NN -LSB-_-LRB- #_# -RSB-_-RRB- ._.
The_DT core_NN idea_NN is_VBZ to_TO develop_VB a_DT service_NN in_IN usual_JJ client_NN /_: server_NN fashion_NN as_IN it_PRP is_VBZ done_VBN in_IN plain_JJ CORBA_NNP ._.
This_DT service_NN then_RB can_MD be_VB started_VBN and_CC executed_VBN on_IN the_DT grid_NN as_IN a_DT common_JJ servant_NN ._.
Additionally_RB it_PRP should_MD be_VB possible_JJ to_TO migrate_VB the_DT service_NN ._.
This_DT can_MD be_VB achieved_VBN by_IN using_VBG value_NN type_NN based_VBN approach_NN to_TO describe_VB the_DT service_NN state_NN as_IN done_VBN in_IN -LSB-_-LRB- #_# -RSB-_-RRB- or_CC using_VBG the_DT language_NN supplied_VBD serialization_NN mechanisms_NNS ._.
As_IN we_PRP would_MD like_VB to_TO tolerate_VB node_NN crashes_NNS and_CC the_DT service_NN should_MD be_VB available_JJ during_IN migration_NN we_PRP support_VBP the_DT active_JJ replication_NN of_IN the_DT service_NN ._.
This_DT is_VBZ achieved_VBN by_IN generating_VBG special_JJ client-side_JJ stubs_NNS that_WDT communicate_VBP with_IN one_CD of_IN the_DT replicas_NNS ._.
To_TO keep_VB the_DT connection_NN between_IN clients_NNS and_CC the_DT replicated_VBN object_NN we_PRP use_VBP time-bounded_JJ references_NNS -LSB-_-LRB- ##_CD -RSB-_-RRB- that_WDT restrict_VBP the_DT migration_NN but_CC make_VBP the_DT usage_NN of_IN location_NN services_NNS -LRB-_-LRB- to_TO cope_VB with_IN outdate_NN references_NNS -RRB-_-RRB- obsolete_JJ ._.
The_DT replicas_NNS are_VBP synchronized_VBN via_IN a_DT group_NN communication_NN framework_NN ._.
The_DT IDL_NNP extension_NN consists_VBZ of_IN additional_JJ modifiers_NNS that_WDT affect_VBP code_NN generation_NN for_IN client_NN and_CC server_NN side_NN ._.
These_DT are_VBP retain_VB to_TO mark_NN non-modifying_JJ operations_NNS which_WDT allows_VBZ faster_RBR responses_NNS and_CC load_NN balancing_NN of_IN those_DT requests_NNS ._.
Furthermore_RB one_PRP can_MD mark_VB methods_NNS as_IN local_JJ which_WDT indicates_VBZ that_IN they_PRP can_MD be_VB locally_RB processed_VBN ._.
In_IN this_DT case_NN the_DT IDLcompiler_NN creates_VBZ placeholder_NN for_IN local_JJ execution_NN ._.
Apart_RB form_VB methods_NNS that_WDT are_VBP usual_JJ static_JJ this_DT is_VBZ useful_JJ to_TO implement_VB client-side_JJ contribution_NN and_CC interaction_NN ._.
For_IN example_NN if_IN a_DT client-stub_JJ offers_NNS a_DT method_NN which_WDT results_VBZ in_IN a_DT file_NN transfer_NN it_PRP is_VBZ possible_JJ to_TO integrate_VB a_DT custom_NN protocol_NN that_WDT forwards_RB a_DT modified_VBN request_NN to_TO the_DT replicated_VBN object_NN which_WDT returns_VBZ not_RB the_DT file_NN as_IN in_IN the_DT common_JJ case_NN but_CC URLs_NNS that_WDT point_VBP to_TO clients_NNS that_WDT previously_RB requested_VBD the_DT file_NN ._.
Now_RB the_DT clientstub_NN fetches_VBZ the_DT data_NNS from_IN the_DT offered_VBN location_NN and_CC responds_VBZ as_IN if_IN it_PRP was_VBD supplied_VBN by_IN the_DT server_NN object_NN ._.
This_DT peer-to-peer_NN based_VBN behavior_NN as_IN known_VBN from_IN Napster_NNP is_VBZ transparent_JJ to_TO the_DT client_NN and_CC can_MD be_VB switched_VBN on_IN and_CC off_IN depending_VBG on_IN environment_NN conditions_NNS like_IN load_NN and_CC community_NN as_IN needed_VBN ._.
Finally_RB we_PRP provide_VBP another_DT modifier_NN to_TO mark_NN administrative_JJ operations_NNS ._.
If_IN a_DT method_NN is_VBZ marked_VBN with_IN admin_NN an_DT authentication_NN is_VBZ necessary_JJ ._.
The_DT method_NN to_TO authenticate_VB is_VBZ pluggable_JJ and_CC might_MD be_VB by_IN pass-phrase_NN ,_, internet_NN address_NN or_CC any_DT other_JJ authentication_NN scheme_NN ._.
This_DT modifier_NN facilitates_VBZ the_DT creation_NN of_IN service_NN management_NN methods_NNS ._.
Article_NNP #_# 6_CD ._.
RELATED_JJ WORK_VBP Grid_NNP infrastructures_NNS like_IN the_DT Globus-Toolkit_NN -LSB-_-LRB- ##_NN -RSB-_-RRB- provide_VBP services_NNS and_CC mechanisms_NNS for_IN distributed_VBN heterogeneous_JJ environments_NNS to_TO combine_VB resources_NNS on_IN demand_NN to_TO solve_VB resource_NN consuming_NN and_CC compute_VB intensive_JJ tasks_NNS ._.
Due_JJ to_TO this_DT orientation_NN they_PRP focus_VBP on_IN different_JJ service_NN models_NNS ,_, provide_VBP no_DT support_NN for_IN object_NN mobility_NN if_IN even_RB supporting_VBG a_DT distributed_VBN object_NN approach_NN at_IN all_DT ._.
But_CC most_RBS important_JJ they_PRP follow_VBP a_DT different_JJ resource_NN management_NN approach_NN as_IN they_PRP target_VBP the_DT parallel_JJ execution_NN of_IN a_DT large_JJ number_NN of_IN short_JJ and_CC midterm_JJ tasks_NNS ._.
JavaSymphony_NNP -LSB-_-LRB- ##_CD -RSB-_-RRB- and_CC Ibis_NN -LSB-_-LRB- ##_NN -RSB-_-RRB- provide_VBP object_NN mobility_NN but_CC are_VBP limited_VBN to_TO the_DT Java_NNP programming_NN language_NN and_CC focus_NN on_IN object_NN oriented_VBN high_JJ performance_NN computing_NN ._.
Actively_RB replicated_VBN objects_NNS are_VBP provided_VBN by_IN Jgroup_NN -LSB-_-LRB- ##_CD -RSB-_-RRB- based_VBN on_IN RMI_NNP ._.
On_IN top_NN of_IN this_DT basic_JJ middleware_NN a_DT replication_NN management_NN layer_NN has_VBZ been_VBN implemented_VBN called_VBN ARM_NN -LSB-_-LRB- ##_CD -RSB-_-RRB- ._.
JGroup_NN focus_NN on_IN the_DT active_JJ replication_NN of_IN objects_NNS but_CC lacks_VBZ support_NN for_IN more_JJR flexible_JJ services_NNS like_IN EDAS_NN does_VBZ ._.
ARM_NN can_MD be_VB compared_VBN to_TO EDAS_NNS but_CC supports_VBZ no_DT resource_NN aware_JJ distribution_NN ._.
Fog_NN -LSB-_-LRB- ##_CD -RSB-_-RRB- and_CC Globe_NNP -LSB-_-LRB- ##_CD -RSB-_-RRB- are_VBP basic_JJ middleware_JJ environments_NNS that_WDT support_VBP the_DT fragmented_JJ object_NN approach_NN ._.
Globe_NNP considers_VBZ replication_NN and_CC caching_NN ._.
Both_DT systems_NNS lack_VBP support_NN for_IN resource_NN aware_JJ distribution_NN ._.
7_CD ._.
CONCLUSION_NN AND_CC ONGOING_JJ WORK_VBP Based_VBN on_IN the_DT fragmented_JJ object_NN model_NN and_CC the_DT architecture_NN of_IN the_DT EDAS_NNP environment_NN ,_, decentralized_VBN adaptive_JJ services_NNS can_MD be_VB easily_RB designed_VBN ,_, implemented_VBN and_CC executed_VBN ._.
As_IN described_VBN the_DT resource_NN management_NN can_MD be_VB decomposed_VBN in_IN two_CD main_JJ problems_NNS that_WDT have_VBP to_TO be_VB solved_VBN ._.
Controlling_JJ and_CC managing_NN of_IN resource_NN limits_NNS including_VBG ensuring_VBG that_IN the_DT assigned_VBN resources_NNS are_VBP available_JJ -LRB-_-LRB- even_RB in_IN the_DT context_NN of_IN node_NN crashes_NNS -RRB-_-RRB- and_CC the_DT autonomous_JJ placement_NN of_IN services_NNS ._.
For_IN both_DT problems_NNS we_PRP offer_VBP a_DT solution_NN ,_, a_DT currently_RB implemented_VBN simulation_NN environment_NN will_MD verify_VB their_PRP$ feasibility_NN ._.
In_IN a_DT next_JJ step_NN the_DT resource_NN management_NN will_MD be_VB integrate_VB in_IN an_DT already_RB implemented_VBN prototype_NN of_IN the_DT EDAS_NN architecture_NN ._.
As_IN described_VBN we_PRP have_VBP already_RB an_DT early_JJ implementation_NN of_IN the_DT framework_NN for_IN the_DT decentralized_VBN adaptive_JJ services_NNS ._.
This_DT framework_NN has_VBZ to_TO be_VB extended_VBN to_TO smoothly_RB interact_VB with_IN the_DT resource_NN management_NN and_CC the_DT EDAS_NN architecture_NN ._.
In_IN a_DT final_JJ step_NN we_PRP need_VBP to_TO implement_VB some_DT services_NNS that_WDT verify_VBP the_DT usability_NN of_IN the_DT whole_JJ EDAS_NN project_NN ._.
8_CD ._.
REFERENCES_NNS -LSB-_-LRB- #_# -RSB-_-RRB- D_NN ._.
Werthimer_NNP S_NN ._.
Bowyer_NNP J_NNP ._.
Cobb_NNP D_NNP ._.
Gedye_NN D_NN ._.
Anderson_NNP W_NNP ._.
T_NN ._.
Sullivan_NNP ,_, III_NNP ._.
A_DT new_JJ major_JJ seti_NN project_NN based_VBN on_IN project_NN serendip_NN data_NNS and_CC ###_CD ,_, ###_CD personal_JJ computers_NNS ._.
In_IN Proc_NNP ._.
of_IN the_DT Fifth_JJ Intl_NNP ._.
Conf_NNP ._.
on_IN Bioastronomy_NNP ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Hans_NNP Reiser_NNP Rudiger_NNP Kapitza_NNP ,_, Franz_NNP J_NNP ._.
Hauck_NNP ._.
Decentralized_JJ ,_, Adaptive_JJ Services_NNPS :_: The_DT AspectIX_NNP Approach_NNP for_IN a_DT Flexible_JJ and_CC Secure_NNP Grid_NNP Environment_NNP ._.
In_IN Grid_NNP Services_NNP Engineering_NNP and_CC Management_NNP -LRB-_-LRB- GSEM_NNP ####_CD -RRB-_-RRB- ,_, Erfurt_NNP ,_, Germany_NNP ,_, ####_CD ._.
Springer_NNP ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Hans_NNP P_NN ._.
Reiser_NNP ,_, Franz_NNP J_NNP ._.
Hauck_NNP ,_, Rudiger_NNP Kapitza_NNP ,_, and_CC Andreas_NNP I_PRP ._.
Schmied_NNP ._.
Integrating_VBG fragmented_JJ objects_NNS into_IN a_DT CORBA_NNP environment_NN ._.
In_IN Proc_NNP ._.
of_IN the_DT Net_NN ._.
ObjectDays_NNP ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Tiberiu_NNP Rotaru_NNP and_CC Hans-Heinrich_NNP Nageli_NNP ._.
Dynamic_NNP load_NN balancing_NN by_IN diffusion_NN in_IN heterogeneous_JJ systems_NNS ._.
J_NN ._.
Parallel_JJ Distrib_NNP ._.
Comput_NNP ._.
,_, ##_NN -LRB-_-LRB- #_# -RRB-_-RRB- :_: 481-497_CD ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- M_NN ._.
Makpangou_NNP ,_, Y_NN ._.
Gourhant_NNP ,_, J_NNP ._.
-_: P_NN ._.
Narzul_NNP ,_, and_CC M_NN ._.
Shapiro_NNP ._.
Fragmented_JJ objects_NNS for_IN distributed_VBN abstractions_NNS ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Jennifer_NNP M_NN ._.
Schopf_NNP ._.
Ten_CD actions_NNS when_WRB grid_NN scheduling_NN :_: the_DT user_NN as_IN a_DT grid_NN scheduler_NN ._.
pages_NNS 15-23_CD ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Leah_NNP Epstein_NN and_CC Rob_NNP van_NNP Stee_NNP ._.
Optimal_JJ online_NN bounded_VBD space_NN multidimensional_JJ packing_NN ._.
In_IN SODA_NNP ''_'' ##_CD :_: Proceedings_NNP of_IN the_DT fifteenth_JJ annual_JJ ACM-SIAM_NN symposium_NN on_IN Discrete_NNP algorithms_NNS ,_, pages_NNS 214-223_CD ,_, Philadelphia_NNP ,_, PA_NN ,_, USA_NNP ,_, ####_CD ._.
Society_NNP for_IN Industrial_NNP and_CC Applied_NNP Mathematics_NNP ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Hans_NNP P_NN ._.
Reiser_NNP ,_, Martin_NNP Steckermeier_NNP ,_, and_CC Franz_NNP J_NNP ._.
Hauck_NNP ._.
IDLflex_NNP :_: a_DT flexible_JJ and_CC generic_JJ compiler_NN for_IN CORBA_NNP IDL_NNP ._.
In_IN Proc_NNP ._.
of_IN the_DT Net_NN ._.
ObjectDays_NNS -LRB-_-LRB- Erfurt_NNP ,_, Germany_NNP ,_, Sep_NNP ._.
10-13_CD ,_, ####_CD -RRB-_-RRB- ,_, ####_NN ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Rudiger_NNP Kapitza_NNP ,_, Holger_NNP Schmidt_NNP ,_, and_CC Franz_NNP J_NNP ._.
Hauck_NNP ._.
Platform-independent_JJ object_NN migration_NN in_IN CORBA_NNP ._.
In_IN Proc_NNP ._.
of_IN the_DT OTM_NNP ''_'' ##_NNP Conferences_NNP -LRB-_-LRB- DOA_NNP ,_, Agia_NNP Napa_NNP ,_, Cyprus_NNP ,_, Oct_NNP 31-Nov_NNP ._.
##_NN ,_, ####_CD -RRB-_-RRB- ,_, ####_NN ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- Rudiger_NNP Kapitza_NNP ,_, Hans_NNP P_NN ._.
Reiser_NNP ,_, and_CC Franz_NNP J_NNP ._.
Hauck_NNP ._.
Stable_JJ ,_, time-bound_JJ references_NNS in_IN context_NN of_IN dynamically_RB changing_VBG environments_NNS ._.
In_IN MDC_NN ''_'' ##_NN :_: Proc_NNP ._.
of_IN the_DT 25th_JJ IEEE_NN Int_NN ._.
Conf_NNP ._.
on_IN Distributed_VBN Computing_NNP Systems_NNPS -_: Workshops_NNS -LRB-_-LRB- ICDCS_NN ####_CD Workshops_NNS -RRB-_-RRB- ,_, ####_NN ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- Ian_NNP Foster_NNP ,_, Carl_NNP Kesselman_NNP ,_, and_CC Steven_NNP Tuecke_NNP ._.
The_DT anatomy_NN of_IN the_DT Grid_NNP :_: Enabling_VBG scalable_JJ virtual_JJ organizations_NNS ._.
Lecture_NNP Notes_NNP in_IN Computer_NNP Science_NNP ,_, 2150_CD ,_, ####_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- Thomas_NNP Fahringer_NNP and_CC Alexandru_NNP Jugravu_NNP ._.
Javasymphony_NNP :_: new_JJ directives_NNS to_TO control_VB and_CC synchronize_VB locality_NN ,_, parallelism_NN ,_, and_CC load_NN balancing_NN for_IN cluster_NN and_CC grid-computing_NN ._.
In_IN JGI_NN ''_'' ##_NN :_: Proceedings_NNP of_IN the_DT ####_CD joint_JJ ACM-ISCOPE_NN conference_NN on_IN Java_NNP Grande_NNP ,_, pages_NNS 8-17_CD ,_, New_NNP York_NNP ,_, NY_NNP ,_, USA_NNP ,_, ####_CD ._.
ACM_NNP Press_NNP ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- Rob_NNP V_NNP ._.
van_NN Nieuwpoort_NNP ,_, Jason_NNP Maassen_NNP ,_, Rutger_NNP Hofman_NNP ,_, Thilo_NNP Kielmann_NNP ,_, and_CC Henri_NNP E_NNP ._.
Bal_NN ._.
Ibis_NNP :_: an_DT efficient_JJ java-based_JJ grid_NN programming_NN environment_NN ._.
In_IN JGI_NN ''_'' ##_NN :_: Proceedings_NNP of_IN the_DT ####_CD joint_JJ ACM-ISCOPE_NN conference_NN on_IN Java_NNP Grande_NNP ,_, pages_NNS 18-27_CD ,_, New_NNP York_NNP ,_, NY_NNP ,_, USA_NNP ,_, ####_CD ._.
ACM_NNP Press_NNP ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- Alberto_NNP Montresor_NNP ,_, Renzo_NNP Davoli_NNP ,_, and_CC Ozalp_NNP Babaoglu_NNP ._.
Middleware_NNP for_IN dependable_JJ network_NN services_NNS in_IN partitionable_JJ distributed_VBN systems_NNS ._.
SIGOPS_NNP Oper_NNP ._.
Syst_NNP ._.
Rev_NN ._.
,_, ##_NN -LRB-_-LRB- #_# -RRB-_-RRB- :_: 73-96_CD ,_, ####_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- H_NN ._.
Meling_VBG and_CC B_NN ._.
Helvik_NNP ._.
Arm_NN :_: Autonomous_JJ replication_NN management_NN in_IN jgroup_NN ,_, ####_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- Mesaac_FW Makpangou_FW ,_, Yvon_NNP Gourhant_NNP ,_, Jean-Pierre_NNP Le_NNP Narzul_NNP ,_, and_CC Marc_NNP Shapiro_NNP ._.
Fragmented_JJ objects_NNS for_IN distributed_VBN abstractions_NNS ._.
In_IN Readings_NNS in_IN Distributed_VBN Computing_NNP Systems_NNPS ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- Philip_NNP Homburg_NNP ,_, Leendert_NNP van_NNP Doorn_NNP ,_, Maarten_NNP van_NNP Steen_NNP ,_, Andrew_NNP S_NN ._.
Tanenbaum_NNP ,_, and_CC Wiebren_NNP de_IN Jonge_NNP ._.
An_DT object_NN model_NN for_IN flexible_JJ distributed_VBN systems_NNS ._.
In_IN Proceedings_NNP of_IN the_DT 1st_JJ Annual_JJ ASCI_NNP Conference_NNP ,_, pages_NNS 69-78_CD ,_, ####_CD ._.
Article_NNP #_#
