Mechanism_NN Design_NN for_IN Online_NNP Real-Time_NNP Scheduling_NNP Ryan_NNP Porter_NNP Computer_NNP Science_NNP Department_NNP Stanford_NNP University_NNP Stanford_NNP ,_, CA_NNP #####_CD rwporter_NN @_IN stanford_NN ._.
edu_FW ABSTRACT_NN For_IN the_DT problem_NN of_IN online_JJ real-time_JJ scheduling_NN of_IN jobs_NNS on_IN a_DT single_JJ processor_NN ,_, previous_JJ work_NN presents_VBZ matching_VBG upper_JJ and_CC lower_JJR bounds_NNS on_IN the_DT competitive_JJ ratio_NN that_WDT can_MD be_VB achieved_VBN by_IN a_DT deterministic_JJ algorithm_NN ._.
However_RB ,_, these_DT results_NNS only_RB apply_VBP to_TO the_DT non-strategic_JJ setting_NN in_IN which_WDT the_DT jobs_NNS are_VBP released_VBN directly_RB to_TO the_DT algorithm_NN ._.
Motivated_VBN by_IN emerging_VBG areas_NNS such_JJ as_IN grid_NN computing_NN ,_, we_PRP instead_RB consider_VBP this_DT problem_NN in_IN an_DT economic_JJ setting_NN ,_, in_IN which_WDT each_DT job_NN is_VBZ released_VBN to_TO a_DT separate_JJ ,_, self-interested_JJ agent_NN ._.
The_DT agent_NN can_MD then_RB delay_VB releasing_VBG the_DT job_NN to_TO the_DT algorithm_NN ,_, inflate_VB its_PRP$ length_NN ,_, and_CC declare_VB an_DT arbitrary_JJ value_NN and_CC deadline_NN for_IN the_DT job_NN ,_, while_IN the_DT center_NN determines_VBZ not_RB only_RB the_DT schedule_NN ,_, but_CC the_DT payment_NN of_IN each_DT agent_NN ._.
For_IN the_DT resulting_VBG mechanism_NN design_NN problem_NN -LRB-_-LRB- in_IN which_WDT we_PRP also_RB slightly_RB strengthen_VB an_DT assumption_NN from_IN the_DT non-strategic_JJ setting_NN -RRB-_-RRB- ,_, we_PRP present_VBP a_DT mechanism_NN that_WDT addresses_VBZ each_DT incentive_NN issue_NN ,_, while_IN only_RB increasing_VBG the_DT competitive_JJ ratio_NN by_IN one_CD ._.
We_PRP then_RB show_VBP a_DT matching_VBG lower_JJR bound_VBN for_IN deterministic_JJ mechanisms_NNS that_WDT never_RB pay_VBP the_DT agents_NNS ._.
Categories_NNS and_CC Subject_NNP Descriptors_NNS I_PRP ._.
#_# ._.
##_NN -LSB-_-LRB- Artificial_NNP Intelligence_NNP -RSB-_-RRB- :_: Distributed_VBN Artificial_JJ Intelligence-Multiagent_JJ systems_NNS ;_: J_NN ._.
#_# -LSB-_-LRB- Social_NNP and_CC Behavioral_NNP Sciences_NNPS -RSB-_-RRB- :_: Economics_NNP ;_: F_NN ._.
#_# ._.
#_# -LSB-_-LRB- Computation_NN by_IN Abstract_NNP Devices_NNPS -RSB-_-RRB- :_: Modes_NNS of_IN Computation-Online_JJ computation_NN General_NNP Terms_NNS Algorithms_NNS ,_, Economics_NNP ,_, Design_NNP ,_, Theory_NNP 1_CD ._.
INTRODUCTION_NN We_PRP consider_VBP the_DT problem_NN of_IN online_JJ scheduling_NN of_IN jobs_NNS on_IN a_DT single_JJ processor_NN ._.
Each_DT job_NN is_VBZ characterized_VBN by_IN a_DT release_NN time_NN ,_, a_DT deadline_NN ,_, a_DT processing_NN time_NN ,_, and_CC a_DT value_NN for_IN successful_JJ completion_NN by_IN its_PRP$ deadline_NN ._.
The_DT objective_NN is_VBZ to_TO maximize_VB the_DT sum_NN of_IN the_DT values_NNS of_IN the_DT jobs_NNS completed_VBN by_IN their_PRP$ respective_JJ deadlines_NNS ._.
The_DT key_JJ challenge_NN in_IN this_DT online_NN setting_NN is_VBZ that_IN the_DT schedule_NN must_MD be_VB constructed_VBN in_IN real-time_JJ ,_, even_RB though_IN nothing_NN is_VBZ known_VBN about_IN a_DT job_NN until_IN its_PRP$ release_NN time_NN ._.
Competitive_JJ analysis_NN -LSB-_-LRB- #_# ,_, ##_NN -RSB-_-RRB- ,_, with_IN its_PRP$ roots_NNS in_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- ,_, is_VBZ a_DT well-studied_JJ approach_NN for_IN analyzing_VBG online_JJ algorithms_NNS by_IN comparing_VBG them_PRP against_IN the_DT optimal_JJ oine_NN algorithm_NN ,_, which_WDT has_VBZ full_JJ knowledge_NN of_IN the_DT input_NN at_IN the_DT beginning_NN of_IN its_PRP$ execution_NN ._.
One_CD interpretation_NN of_IN this_DT approach_NN is_VBZ as_IN a_DT game_NN between_IN the_DT designer_NN of_IN the_DT online_JJ algorithm_NN and_CC an_DT adversary_NN ._.
First_RB ,_, the_DT designer_NN selects_VBZ the_DT online_JJ algorithm_NN ._.
Then_RB ,_, the_DT adversary_NN observes_VBZ the_DT algorithm_NN and_CC selects_VBZ the_DT sequence_NN of_IN jobs_NNS that_WDT maximizes_VBZ the_DT competitive_JJ ratio_NN :_: the_DT ratio_NN of_IN the_DT value_NN of_IN the_DT jobs_NNS completed_VBN by_IN an_DT optimal_JJ oine_NN algorithm_NN to_TO the_DT value_NN of_IN those_DT completed_VBN by_IN the_DT online_JJ algorithm_NN ._.
Two_CD papers_NNS paint_VBP a_DT complete_JJ picture_NN in_IN terms_NNS of_IN competitive_JJ analysis_NN for_IN this_DT setting_NN ,_, in_IN which_WDT the_DT algorithm_NN is_VBZ assumed_VBN to_TO know_VB k_NN ,_, the_DT maximum_NN ratio_NN between_IN the_DT value_NN densities_NNS -LRB-_-LRB- value_NN divided_VBN by_IN processing_VBG time_NN -RRB-_-RRB- of_IN any_DT two_CD jobs_NNS ._.
For_IN k_NN =_JJ #_# ,_, -LSB-_-LRB- #_# -RSB-_-RRB- presents_VBZ a_DT 4-competitive_JJ algorithm_NN ,_, and_CC proves_VBZ that_IN this_DT is_VBZ a_DT lower_JJR bound_VBN on_IN the_DT competitive_JJ ratio_NN for_IN deterministic_JJ algorithms_NNS ._.
The_DT same_JJ paper_NN also_RB generalizes_VBZ the_DT lower_JJR bound_VBN to_TO -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# for_IN any_DT k_NN #_# ,_, and_CC -LSB-_-LRB- ##_CD -RSB-_-RRB- then_RB presents_VBZ a_DT matching_NN -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# -_: competitive_JJ algorithm_NN ._.
The_DT setting_NN addressed_VBN by_IN these_DT papers_NNS is_VBZ completely_RB nonstrategic_JJ ,_, and_CC the_DT algorithm_NN is_VBZ assumed_VBN to_TO always_RB know_VB the_DT true_JJ characteristics_NNS of_IN each_DT job_NN upon_IN its_PRP$ release_NN ._.
However_RB ,_, in_IN domains_NNS such_JJ as_IN grid_NN computing_NN -LRB-_-LRB- see_VB ,_, for_IN example_NN ,_, -LSB-_-LRB- #_# ,_, 8_CD -RSB-_-RRB- -RRB-_-RRB- this_DT assumption_NN is_VBZ invalid_JJ ,_, because_IN buyers_NNS of_IN processor_NN time_NN choose_VB when_WRB and_CC how_WRB to_TO submit_VB their_PRP$ jobs_NNS ._.
Furthermore_RB ,_, sellers_NNS not_RB only_RB schedule_NN jobs_NNS but_CC also_RB determine_VB the_DT amount_NN that_IN they_PRP charge_VBP buyers_NNS ,_, an_DT issue_NN not_RB addressed_VBD in_IN the_DT non-strategic_JJ setting_NN ._.
Thus_RB ,_, we_PRP consider_VBP an_DT extension_NN of_IN the_DT setting_NN in_IN which_WDT each_DT job_NN is_VBZ owned_VBN by_IN a_DT separate_JJ ,_, self-interested_JJ agent_NN ._.
Instead_RB of_IN being_VBG released_VBN to_TO the_DT algorithm_NN ,_, each_DT job_NN is_VBZ now_RB released_VBN only_RB to_TO its_PRP$ owning_VBG agent_NN ._.
Each_DT agent_NN now_RB has_VBZ four_CD different_JJ ways_NNS in_IN which_WDT it_PRP can_MD manipulate_VB the_DT algorithm_NN :_: it_PRP decides_VBZ when_WRB to_TO submit_VB the_DT job_NN to_TO the_DT algorithm_NN after_IN the_DT true_JJ release_NN time_NN ,_, it_PRP can_MD artificially_RB inflate_VB the_DT length_NN of_IN the_DT job_NN ,_, and_CC it_PRP can_MD declare_VB an_DT arbitrary_JJ value_NN and_CC deadline_NN for_IN the_DT job_NN ._.
Because_IN the_DT agents_NNS are_VBP self-interested_JJ ,_, they_PRP will_MD choose_VB to_TO manipulate_VB the_DT algorithm_NN if_IN doing_VBG so_RB will_MD cause_VB 61_CD their_PRP$ job_NN to_TO be_VB completed_VBN ;_: and_CC ,_, indeed_RB ,_, one_PRP can_MD find_VB examples_NNS in_IN which_WDT agents_NNS have_VBP incentive_NN to_TO manipulate_VB the_DT algorithms_NNS presented_VBN in_IN -LSB-_-LRB- #_# -RSB-_-RRB- and_CC -LSB-_-LRB- ##_CD -RSB-_-RRB- ._.
The_DT addition_NN of_IN self-interested_JJ agents_NNS moves_VBZ the_DT problem_NN from_IN the_DT area_NN of_IN algorithm_NN design_NN to_TO that_DT of_IN mechanism_NN design_NN -LSB-_-LRB- ##_CD -RSB-_-RRB- ,_, the_DT science_NN of_IN crafting_VBG protocols_NNS for_IN self-interested_JJ agents_NNS ._.
Recent_JJ years_NNS have_VBP seen_VBN much_JJ activity_NN at_IN the_DT interface_NN of_IN computer_NN science_NN and_CC mechanism_NN design_NN -LRB-_-LRB- see_VB ,_, e_LS ._.
g_NN ._.
,_, -LSB-_-LRB- #_# ,_, ##_NN ,_, ##_NN -RSB-_-RRB- -RRB-_-RRB- ._.
In_IN general_JJ ,_, a_DT mechanism_NN defines_VBZ a_DT protocol_NN for_IN interaction_NN between_IN the_DT agents_NNS and_CC the_DT center_NN that_WDT culminates_VBZ with_IN the_DT selection_NN of_IN an_DT outcome_NN ._.
In_IN our_PRP$ setting_NN ,_, a_DT mechanism_NN will_MD take_VB as_RB input_NN a_DT job_NN from_IN each_DT agent_NN ,_, and_CC return_VB a_DT schedule_NN for_IN the_DT jobs_NNS ,_, and_CC a_DT payment_NN to_TO be_VB made_VBN by_IN each_DT agent_NN to_TO the_DT center_NN ._.
A_DT basic_JJ solution_NN concept_NN of_IN mechanism_NN design_NN is_VBZ incentive_NN compatibility_NN ,_, which_WDT ,_, in_IN our_PRP$ setting_NN ,_, requires_VBZ that_IN it_PRP is_VBZ always_RB in_IN each_DT agent_NN ''_'' s_NNS best_JJS interests_NNS to_TO immediately_RB submit_VB its_PRP$ job_NN upon_IN release_NN ,_, and_CC to_TO truthfully_RB declare_VB its_PRP$ value_NN ,_, length_NN ,_, and_CC deadline_NN ._.
In_IN order_NN to_TO evaluate_VB a_DT mechanism_NN using_VBG competitive_JJ analysis_NN ,_, the_DT adversary_NN model_NN must_MD be_VB updated_VBN ._.
In_IN the_DT new_JJ model_NN ,_, the_DT adversary_NN still_RB determines_VBZ the_DT sequence_NN of_IN jobs_NNS ,_, but_CC it_PRP is_VBZ the_DT self-interested_JJ agents_NNS who_WP determine_VBP the_DT observed_VBN input_NN of_IN the_DT mechanism_NN ._.
Thus_RB ,_, in_IN order_NN to_TO achieve_VB a_DT competitive_JJ ratio_NN of_IN c_NN ,_, an_DT online_JJ mechanism_NN must_MD both_DT be_VB incentive_NN compatible_JJ ,_, and_CC always_RB achieve_VB at_IN least_JJS #_# c_NN of_IN the_DT value_NN that_IN the_DT optimal_JJ oine_NN mechanism_NN achieves_VBZ on_IN the_DT same_JJ sequence_NN of_IN jobs_NNS ._.
The_DT rest_NN of_IN the_DT paper_NN is_VBZ structured_VBN as_IN follows_VBZ ._.
In_IN Section_NN #_# ,_, we_PRP formally_RB define_VBP and_CC review_VBP results_NNS from_IN the_DT original_JJ ,_, non-strategic_JJ setting_NN ._.
After_IN introducing_VBG the_DT incentive_NN issues_NNS through_IN an_DT example_NN ,_, we_PRP formalize_VBP the_DT mechanism_NN design_NN setting_NN in_IN Section_NN #_# ._.
In_IN Section_NN #_# we_PRP present_VBP our_PRP$ first_JJ main_JJ result_NN ,_, a_DT -LRB-_-LRB- -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# -RRB-_-RRB- -_: competitive_JJ mechanism_NN ,_, and_CC formally_RB prove_VBP incentive_NN compatibility_NN and_CC the_DT competitive_JJ ratio_NN ._.
We_PRP also_RB show_VBP how_WRB we_PRP can_MD simplify_VB this_DT mechanism_NN for_IN the_DT special_JJ case_NN in_IN which_WDT k_NN =_JJ #_# and_CC each_DT agent_NN can_MD not_RB alter_VB the_DT length_NN of_IN its_PRP$ job_NN ._.
Returning_VBG the_DT general_JJ setting_NN ,_, we_PRP show_VBP in_IN Section_NN #_# that_IN this_DT competitive_JJ ratio_NN is_VBZ a_DT lower_JJR bound_VBN for_IN deterministic_JJ mechanisms_NNS that_WDT do_VBP not_RB pay_VB agents_NNS ._.
Finally_RB ,_, in_IN Section_NN #_# ,_, we_PRP discuss_VBP related_JJ work_NN other_JJ than_IN the_DT directly_RB relevant_JJ -LSB-_-LRB- #_# -RSB-_-RRB- and_CC -LSB-_-LRB- ##_CD -RSB-_-RRB- ,_, before_IN concluding_VBG with_IN Section_NN #_# ._.
2_LS ._.
NON-STRATEGIC_NN SETTING_NNP In_IN this_DT section_NN ,_, we_PRP formally_RB define_VBP the_DT original_JJ ,_, non-strategic_JJ setting_NN ,_, and_CC recap_NN previous_JJ results_NNS ._.
2_LS ._.
#_# Formulation_NNP There_EX exists_VBZ a_DT single_JJ processor_NN on_IN which_WDT jobs_NNS can_MD execute_VB ,_, and_CC N_NN jobs_NNS ,_, although_IN this_DT number_NN is_VBZ not_RB known_VBN beforehand_RB ._.
Each_DT job_NN i_FW is_VBZ characterized_VBN by_IN a_DT tuple_NN i_FW =_JJ -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, which_WDT denotes_VBZ the_DT release_NN time_NN ,_, deadline_NN ,_, length_NN of_IN processing_NN time_NN required_VBN ,_, and_CC value_NN ,_, respectively_RB ._.
The_DT space_NN i_FW of_IN possible_JJ tuples_NNS is_VBZ the_DT same_JJ for_IN each_DT job_NN and_CC consists_VBZ of_IN all_DT i_FW such_JJ that_IN ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS +_CC -LRB-_-LRB- thus_RB ,_, the_DT model_NN of_IN time_NN is_VBZ continuous_JJ -RRB-_-RRB- ._.
Each_DT job_NN is_VBZ released_VBN at_IN time_NN ri_NN ,_, at_IN which_WDT point_NN its_PRP$ three_CD other_JJ characteristics_NNS are_VBP known_VBN ._.
Nothing_NN is_VBZ known_VBN about_IN the_DT job_NN before_IN its_PRP$ arrival_NN ._.
Each_DT deadline_NN is_VBZ firm_NN -LRB-_-LRB- or_CC ,_, hard_JJ -RRB-_-RRB- ,_, which_WDT means_VBZ that_IN no_DT value_NN is_VBZ obtained_VBN for_IN a_DT job_NN that_WDT is_VBZ completed_VBN after_IN its_PRP$ deadline_NN ._.
Preemption_NN of_IN jobs_NNS is_VBZ allowed_VBN ,_, and_CC it_PRP takes_VBZ no_DT time_NN to_TO switch_VB between_IN jobs_NNS ._.
Thus_RB ,_, job_NN i_FW is_VBZ completed_VBN if_IN and_CC only_RB if_IN the_DT total_JJ time_NN it_PRP executes_VBZ on_IN the_DT processor_NN before_IN di_FW is_VBZ at_IN least_JJS li_NNS ._.
Let_VB =_JJ -LRB-_-LRB- #_# ,_, ..._: ,_, N_NN -RRB-_-RRB- denote_VBP the_DT vector_NN of_IN tuples_NNS for_IN all_DT jobs_NNS ,_, and_CC let_VB i_FW =_JJ -LRB-_-LRB- #_# ,_, ..._: ,_, i1_NN ,_, i_FW +_CC #_# ,_, ..._: ,_, N_NN -RRB-_-RRB- denote_VBP the_DT same_JJ vector_NN without_IN the_DT tuple_NN for_IN job_NN i_FW ._.
Thus_RB ,_, -LRB-_-LRB- i_LS ,_, i_LS -RRB-_-RRB- denotes_VBZ a_DT complete_JJ vector_NN of_IN tuples_NNS ._.
Define_VB the_DT value_NN density_NN i_FW =_JJ vi_LS li_NN of_IN job_NN i_FW to_TO be_VB the_DT ratio_NN of_IN its_PRP$ value_NN to_TO its_PRP$ length_NN ._.
For_IN an_DT input_NN ,_, denote_VBP the_DT maximum_NN and_CC minimum_JJ value_NN densities_NNS as_IN min_NN =_JJ mini_NNS i_LS and_CC max_NN =_JJ maxi_NN i_FW ._.
The_DT importance_NN ratio_NN is_VBZ then_RB defined_VBN to_TO be_VB max_NN min_NN ,_, the_DT maximal_JJ ratio_NN of_IN value_NN densities_NNS between_IN two_CD jobs_NNS ._.
The_DT algorithm_NN is_VBZ assumed_VBN to_TO always_RB know_VB an_DT upper_JJ bound_VBN k_NN on_IN the_DT importance_NN ratio_NN ._.
For_IN simplicity_NN ,_, we_PRP normalize_VBP the_DT range_NN of_IN possible_JJ value_NN densities_NNS so_IN that_IN min_NN =_JJ #_# ._.
An_DT online_JJ algorithm_NN is_VBZ a_DT function_NN f_FW :_: #_# ..._: N_NN O_NN that_WDT maps_VBZ the_DT vector_NN of_IN tuples_NNS -LRB-_-LRB- for_IN any_DT number_NN N_NN -RRB-_-RRB- to_TO an_DT outcome_NN o_NN ._.
An_DT outcome_NN o_NN O_NN is_VBZ simply_RB a_DT schedule_NN of_IN jobs_NNS on_IN the_DT processor_NN ,_, recorded_VBN by_IN the_DT function_NN S_NN :_: +_CC -LCB-_-LRB- #_# ,_, #_# ,_, ..._: ,_, N_NN -RCB-_-RRB- ,_, which_WDT maps_VBZ each_DT point_NN in_IN time_NN to_TO the_DT active_JJ job_NN ,_, or_CC to_TO #_# if_IN the_DT processor_NN is_VBZ idle_JJ ._.
To_TO denote_VB the_DT total_JJ elapsed_JJ time_NN that_IN a_DT job_NN has_VBZ spent_VBN on_IN the_DT processor_NN at_IN time_NN t_NN ,_, we_PRP will_MD use_VB the_DT function_NN ei_NN -LRB-_-LRB- t_NN -RRB-_-RRB- =_JJ t_NN 0_CD -LRB-_-LRB- S_NN -LRB-_-LRB- x_NN -RRB-_-RRB- =_JJ i_LS -RRB-_-RRB- dx_NN ,_, where_WRB -LRB-_-LRB- -RRB-_-RRB- is_VBZ an_DT indicator_NN function_NN that_WDT returns_VBZ #_# if_IN the_DT argument_NN is_VBZ true_JJ ,_, and_CC zero_CD otherwise_RB ._.
A_DT job_NN ''_'' s_NNS laxity_NN at_IN time_NN t_NN is_VBZ defined_VBN to_TO be_VB di_FW t_NN li_NN +_CC ei_NN -LRB-_-LRB- t_NN -RRB-_-RRB- ,_, the_DT amount_NN of_IN time_NN that_IN it_PRP can_MD remain_VB inactive_JJ and_CC still_RB be_VB completed_VBN by_IN its_PRP$ deadline_NN ._.
A_DT job_NN is_VBZ abandoned_VBN if_IN it_PRP can_MD not_RB be_VB completed_VBN by_IN its_PRP$ deadline_NN -LRB-_-LRB- formally_RB ,_, if_IN di_FW t_NN +_CC ei_NN -LRB-_-LRB- t_NN -RRB-_-RRB- <_JJR li_NNS -RRB-_-RRB- ._.
Also_RB ,_, overload_NN S_NN -LRB-_-LRB- -RRB-_-RRB- and_CC ei_NN -LRB-_-LRB- -RRB-_-RRB- so_IN that_IN they_PRP can_MD also_RB take_VB a_DT vector_NN as_IN an_DT argument_NN ._.
For_IN example_NN ,_, S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- is_VBZ shorthand_NN for_IN the_DT S_NN -LRB-_-LRB- t_NN -RRB-_-RRB- of_IN the_DT outcome_NN f_FW -LRB-_-LRB- -RRB-_-RRB- ,_, and_CC it_PRP denotes_VBZ the_DT active_JJ job_NN at_IN time_NN t_NN when_WRB the_DT input_NN is_VBZ ._.
Since_IN a_DT job_NN can_MD not_RB be_VB executed_VBN before_IN its_PRP$ release_NN time_NN ,_, the_DT space_NN of_IN possible_JJ outcomes_NNS is_VBZ restricted_VBN in_IN that_DT S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- =_JJ i_FW implies_VBZ ri_NN t_NN ._.
Also_RB ,_, because_IN the_DT online_JJ algorithm_NN must_MD produce_VB the_DT schedule_NN over_IN time_NN ,_, without_IN knowledge_NN of_IN future_JJ inputs_NNS ,_, it_PRP must_MD make_VB the_DT same_JJ decision_NN at_IN time_NN t_NN for_IN inputs_NNS that_WDT are_VBP indistinguishable_JJ at_IN this_DT time_NN ._.
Formally_RB ,_, let_VB -LRB-_-LRB- t_NN -RRB-_-RRB- denote_VBP the_DT subset_NN of_IN the_DT tuples_NNS in_IN that_DT satisfy_VBP ri_NN t_NN ._.
The_DT constraint_NN is_VBZ then_RB that_IN -LRB-_-LRB- t_NN -RRB-_-RRB- =_JJ -LRB-_-LRB- t_NN -RRB-_-RRB- implies_VBZ S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- =_JJ S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- ._.
The_DT objective_JJ function_NN is_VBZ the_DT sum_NN of_IN the_DT values_NNS of_IN the_DT jobs_NNS that_WDT are_VBP completed_VBN by_IN their_PRP$ respective_JJ deadlines_NNS :_: W_NN -LRB-_-LRB- o_NN ,_, -RRB-_-RRB- =_JJ i_FW vi_LS -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- ._.
Let_VB W_NNP -LRB-_-LRB- -RRB-_-RRB- =_JJ maxoO_NN W_NN -LRB-_-LRB- o_NN ,_, -RRB-_-RRB- denote_VBP the_DT maximum_NN possible_JJ total_JJ value_NN for_IN the_DT profile_NN ._.
In_IN competitive_JJ analysis_NN ,_, an_DT online_JJ algorithm_NN is_VBZ evaluated_VBN by_IN comparing_VBG it_PRP against_IN an_DT optimal_JJ oine_NN algorithm_NN ._.
Because_IN the_DT oine_NN algorithm_NN knows_VBZ the_DT entire_JJ input_NN at_IN time_NN 0_CD -LRB-_-LRB- but_CC still_RB can_MD not_RB start_VB each_DT job_NN i_FW until_IN time_NN ri_NN -RRB-_-RRB- ,_, it_PRP always_RB achieves_VBZ W_NN -LRB-_-LRB- -RRB-_-RRB- ._.
An_DT online_JJ algorithm_NN f_FW -LRB-_-LRB- -RRB-_-RRB- is_VBZ -LRB-_-LRB- strictly_RB -RRB-_-RRB- c-competitive_JJ if_IN there_EX does_VBZ not_RB exist_VB an_DT input_NN such_JJ that_IN c_NN W_NN -LRB-_-LRB- f_FW -LRB-_-LRB- -RRB-_-RRB- ,_, -RRB-_-RRB- <_JJR W_NN -LRB-_-LRB- -RRB-_-RRB- ._.
An_DT algorithm_NN that_WDT is_VBZ c-competitive_JJ is_VBZ also_RB said_VBD to_TO achieve_VB a_DT competitive_JJ ratio_NN of_IN c_NN ._.
We_PRP assume_VBP that_IN there_EX does_VBZ not_RB exist_VB an_DT overload_NN period_NN of_IN infinite_JJ duration_NN ._.
A_DT period_NN of_IN time_NN -LSB-_-LRB- ts_NNS ,_, tf_NN -RSB-_-RRB- is_VBZ overloaded_VBN if_IN the_DT sum_NN of_IN the_DT lengths_NNS of_IN the_DT jobs_NNS whose_WP$ release_NN time_NN and_CC deadline_NN both_CC fall_NN within_IN the_DT time_NN period_NN exceeds_VBZ the_DT duration_NN of_IN the_DT interval_NN -LRB-_-LRB- formally_RB ,_, if_IN tf_NN ts_NNS i_FW |_FW -LRB-_-LRB- tsri_NN ,_, ditf_NN -RRB-_-RRB- li_NN -RRB-_-RRB- ._.
Without_IN such_PDT an_DT assumption_NN ,_, it_PRP is_VBZ not_RB possible_JJ to_TO achieve_VB a_DT finite_JJ competitive_JJ ratio_NN -LSB-_-LRB- ##_CD -RSB-_-RRB- ._.
2_LS ._.
#_# Previous_JJ Results_NNS In_IN the_DT non-strategic_JJ setting_NN ,_, -LSB-_-LRB- #_# -RSB-_-RRB- presents_VBZ a_DT 4-competitive_JJ algorithm_NN called_VBN TD1_NN -LRB-_-LRB- version_NN #_# -RRB-_-RRB- for_IN the_DT case_NN of_IN k_NN =_JJ #_# ,_, while_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- presents_VBZ a_DT -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# -_: competitive_JJ algorithm_NN called_VBN Dover_NNP for_IN the_DT general_JJ case_NN of_IN k_NN #_# ._.
Matching_VBG lower_JJR bounds_NNS for_IN deterministic_JJ algorithms_NNS for_IN both_DT of_IN these_DT cases_NNS were_VBD shown_VBN 62_CD in_IN -LSB-_-LRB- #_# -RSB-_-RRB- ._.
In_IN this_DT section_NN we_PRP provide_VBP a_DT high-level_JJ description_NN of_IN TD1_NN -LRB-_-LRB- version_NN #_# -RRB-_-RRB- using_VBG an_DT example_NN ._.
TD1_NN -LRB-_-LRB- version_NN #_# -RRB-_-RRB- divides_VBZ the_DT schedule_NN into_IN intervals_NNS ,_, each_DT of_IN which_WDT begins_VBZ when_WRB the_DT processor_NN transitions_NNS from_IN idle_JJ to_TO busy_JJ -LRB-_-LRB- call_VB this_DT time_NN tb_NN -RRB-_-RRB- ,_, and_CC ends_VBZ with_IN the_DT completion_NN of_IN a_DT job_NN ._.
The_DT first_JJ active_JJ job_NN of_IN an_DT interval_NN may_MD have_VB laxity_NN ;_: however_RB ,_, for_IN the_DT remainder_NN of_IN the_DT interval_NN ,_, preemption_NN of_IN the_DT active_JJ job_NN is_VBZ only_RB considered_VBN when_WRB some_DT other_JJ job_NN has_VBZ zero_CD laxity_NN ._.
For_IN example_NN ,_, when_WRB the_DT input_NN is_VBZ the_DT set_NN of_IN jobs_NNS listed_VBN in_IN Table_NNP #_# ,_, the_DT first_JJ interval_NN is_VBZ the_DT complete_JJ execution_NN of_IN job_NN #_# over_IN the_DT range_NN -LSB-_-LRB- #_# ._.
#_# ,_, #_# ._.
#_# -RSB-_-RRB- ._.
No_DT preemption_NN is_VBZ considered_VBN during_IN this_DT interval_NN ,_, because_IN job_NN #_# has_VBZ laxity_NN until_IN time_NN #_# ._.
#_# ._.
Then_RB ,_, a_DT new_JJ interval_NN starts_VBZ at_IN tb_NN =_JJ #_# ._.
#_# when_WRB job_NN #_# becomes_VBZ active_JJ ._.
Before_IN job_NN #_# can_MD finish_VB ,_, preemption_NN is_VBZ considered_VBN at_IN time_NN #_# ._.
#_# ,_, when_WRB job_NN #_# is_VBZ released_VBN with_IN zero_CD laxity_NN ._.
In_IN order_NN to_TO decide_VB whether_IN to_TO preempt_VB the_DT active_JJ job_NN ,_, TD1_NN -LRB-_-LRB- version_NN #_# -RRB-_-RRB- uses_VBZ two_CD more_JJR variables_NNS :_: te_NN and_CC p_NN loss_NN ._.
The_DT former_JJ records_NNS the_DT latest_JJS deadline_NN of_IN a_DT job_NN that_WDT would_MD be_VB abandoned_VBN if_IN the_DT active_JJ job_NN executes_VBZ to_TO completion_NN -LRB-_-LRB- or_CC ,_, if_IN no_DT such_JJ job_NN exists_VBZ ,_, the_DT time_NN that_IN the_DT active_JJ job_NN will_MD finish_VB if_IN it_PRP is_VBZ not_RB preempted_VBN -RRB-_-RRB- ._.
In_IN this_DT case_NN ,_, te_NN =_JJ ##_CD ._.
#_# ._.
The_DT value_NN te_NN tb_NN represents_VBZ the_DT an_DT upper_JJ bound_VBN on_IN the_DT amount_NN of_IN possible_JJ execution_NN time_NN lost_VBD to_TO the_DT optimal_JJ oine_NN algorithm_NN due_JJ to_TO the_DT completion_NN of_IN the_DT active_JJ job_NN ._.
The_DT other_JJ variable_JJ ,_, p_NN loss_NN ,_, is_VBZ equal_JJ to_TO the_DT length_NN of_IN the_DT first_JJ active_JJ job_NN of_IN the_DT current_JJ interval_NN ._.
Because_IN in_IN general_JJ this_DT job_NN could_MD have_VB laxity_NN ,_, the_DT oine_NN algorithm_NN may_MD be_VB able_JJ to_TO complete_VB it_PRP outside_IN of_IN the_DT range_NN -LSB-_-LRB- tb_NN ,_, te_NN -RSB-_-RRB- ._.
#_# If_IN the_DT algorithm_NN completes_VBZ the_DT active_JJ job_NN and_CC this_DT job_NN ''_'' s_NNS length_NN is_VBZ at_IN least_JJS te_FW tb_FW +_CC p_NN loss_NN 4_CD ,_, then_RB the_DT algorithm_NN is_VBZ guaranteed_VBN to_TO be_VB 4-competitive_JJ for_IN this_DT interval_NN -LRB-_-LRB- note_NN that_WDT k_NN =_JJ #_# implies_VBZ that_IN all_DT jobs_NNS have_VBP the_DT same_JJ value_NN density_NN and_CC thus_RB that_IN lengths_NNS can_MD used_VBN to_TO compute_VB the_DT competitive_JJ ratio_NN -RRB-_-RRB- ._.
Because_IN this_DT is_VBZ not_RB case_NN at_IN time_NN #_# ._.
#_# -LRB-_-LRB- since_IN te_NN tb_NN +_CC p_NN loss_NN 4_CD =_JJ ##_NN ._.
##_NN ._.
#_# +_CC #_# ._.
#_# 4_CD >_JJR #_# ._.
#_# =_JJ l2_NN -RRB-_-RRB- ,_, the_DT algorithm_NN preempts_VBZ job_NN #_# for_IN job_NN #_# ,_, which_WDT then_RB executes_VBZ to_TO completion_NN ._.
Job_NNP ri_NNP di_NNP li_NNP vi_LS 1_CD #_# ._.
#_# #_# ._.
#_# #_# ._.
#_# #_# ._.
#_# 2_CD #_# ._.
#_# #_# ._.
#_# #_# ._.
#_# #_# ._.
#_# 3_CD #_# ._.
#_# ##_CD ._.
#_# ##_CD ._.
#_# ##_CD ._.
#_# 01_CD #_# ##_CD 6_CD ?_.
6_CD ?_.
6_CD ?_.
Table_NNP #_# :_: Input_NNP used_VBD to_TO recap_VB TD1_NN -LRB-_-LRB- version_NN #_# -RRB-_-RRB- -LSB-_-LRB- #_# -RSB-_-RRB- ._.
The_DT up_RP and_CC down_RP arrows_NNS represent_VBP ri_NN and_CC di_FW ,_, respectively_RB ,_, while_IN the_DT length_NN of_IN the_DT box_NN equals_VBZ li_NNS ._.
3_LS ._.
MECHANISM_NN DESIGN_NN SETTING_VBG However_RB ,_, false_JJ information_NN about_IN job_NN #_# would_MD cause_VB TD1_NN -LRB-_-LRB- version_NN #_# -RRB-_-RRB- to_TO complete_VB this_DT job_NN ._.
For_IN example_NN ,_, if_IN job_NN #_# ''_'' s_VBZ deadline_NN were_VBD declared_VBN as_IN d2_NN =_JJ #_# ._.
#_# ,_, then_RB it_PRP would_MD have_VB zero_CD laxity_NN at_IN time_NN #_# ._.
#_# ._.
At_IN this_DT time_NN ,_, the_DT algorithm_NN would_MD preempt_VB job_NN 1_CD for_IN job_NN #_# ,_, because_IN te_NN tb_NN +_CC p_NN loss_NN 4_CD =_JJ #_# ._.
##_NN ._.
#_# +_CC #_# ._.
#_# 4_CD >_JJR #_# ._.
#_# =_JJ l1_NN ._.
Job_NNP #_# would_MD then_RB complete_VB before_IN the_DT arrival_NN of_IN job_NN #_# ._.
#_# 1_CD While_IN it_PRP would_MD be_VB easy_JJ to_TO alter_VB the_DT algorithm_NN to_TO recognize_VB that_IN this_DT is_VBZ not_RB possible_JJ for_IN the_DT jobs_NNS in_IN Table_NNP #_# ,_, our_PRP$ example_NN does_VBZ not_RB depend_VB on_IN the_DT use_NN of_IN p_NN loss_NN ._.
2_CD While_IN we_PRP will_MD not_RB describe_VB the_DT significantly_RB more_RBR complex_JJ In_IN order_NN to_TO address_VB incentive_NN issues_NNS such_JJ as_IN this_DT one_CD ,_, we_PRP need_VBP to_TO formalize_VB the_DT setting_NN as_IN a_DT mechanism_NN design_NN problem_NN ._.
In_IN this_DT section_NN we_PRP first_RB present_VB the_DT mechanism_NN design_NN formulation_NN ,_, and_CC then_RB define_VB our_PRP$ goals_NNS for_IN the_DT mechanism_NN ._.
3_LS ._.
#_# Formulation_NNP There_EX exists_VBZ a_DT center_NN ,_, who_WP controls_VBZ the_DT processor_NN ,_, and_CC N_NN agents_NNS ,_, where_WRB the_DT value_NN of_IN N_NN is_VBZ unknown_JJ by_IN the_DT center_NN beforehand_RB ._.
Each_DT job_NN i_FW is_VBZ owned_VBN by_IN a_DT separate_JJ agent_NN i_FW ._.
The_DT characteristics_NNS of_IN the_DT job_NN define_VB the_DT agent_NN ''_'' s_NNS type_NN i_FW i_FW ._.
At_IN time_NN ri_NN ,_, agent_NN i_FW privately_RB observes_VBZ its_PRP$ type_NN i_FW ,_, and_CC has_VBZ no_DT information_NN about_IN job_NN i_FW before_IN ri_NN ._.
Thus_RB ,_, jobs_NNS are_VBP still_RB released_VBN over_IN time_NN ,_, but_CC now_RB each_DT job_NN is_VBZ revealed_VBN only_RB to_TO the_DT owning_NN agent_NN ._.
Agents_NNS interact_VBP with_IN the_DT center_NN through_IN a_DT direct_JJ mechanism_NN =_JJ -LRB-_-LRB- #_# ,_, ..._: ,_, N_NN ,_, g_NN -LRB-_-LRB- -RRB-_-RRB- -RRB-_-RRB- ,_, in_IN which_WDT each_DT agent_NN declares_VBZ a_DT job_NN ,_, denoted_VBN by_IN i_FW =_JJ -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, and_CC g_NN :_: #_# ..._: N_NN O_NN maps_VBZ the_DT declared_VBN types_NNS to_TO an_DT outcome_NN o_NN O_NN ._.
An_DT outcome_NN o_NN =_JJ -LRB-_-LRB- S_NN -LRB-_-LRB- -RRB-_-RRB- ,_, p1_NN ,_, ..._: ,_, pN_NN -RRB-_-RRB- consists_VBZ of_IN a_DT schedule_NN and_CC a_DT payment_NN from_IN each_DT agent_NN to_TO the_DT mechanism_NN ._.
In_IN a_DT standard_JJ mechanism_NN design_NN setting_NN ,_, the_DT outcome_NN is_VBZ enforced_VBN at_IN the_DT end_NN of_IN the_DT mechanism_NN ._.
However_RB ,_, since_IN the_DT end_NN is_VBZ not_RB well-defined_JJ in_IN this_DT online_NN setting_NN ,_, we_PRP choose_VBP to_TO model_VB returning_VBG the_DT job_NN if_IN it_PRP is_VBZ completed_VBN and_CC collecting_VBG a_DT payment_NN from_IN each_DT agent_NN i_FW as_IN occurring_VBG at_IN di_FW ,_, which_WDT ,_, according_VBG to_TO the_DT agent_NN ''_'' s_NNS declaration_NN ,_, is_VBZ the_DT latest_JJS relevant_JJ point_NN of_IN time_NN for_IN that_DT agent_NN ._.
That_DT is_VBZ ,_, even_RB if_IN job_NN i_FW is_VBZ completed_VBN before_IN di_FW ,_, the_DT center_NN does_VBZ not_RB return_VB the_DT job_NN to_TO agent_NN i_FW until_IN that_DT time_NN ._.
This_DT modelling_NN decision_NN could_MD instead_RB be_VB viewed_VBN as_IN a_DT decision_NN by_IN the_DT mechanism_NN designer_NN from_IN a_DT larger_JJR space_NN of_IN possible_JJ mechanisms_NNS ._.
Indeed_RB ,_, as_IN we_PRP will_MD discuss_VB later_RB ,_, this_DT decision_NN of_IN when_WRB to_TO return_VB a_DT completed_VBN job_NN is_VBZ crucial_JJ to_TO our_PRP$ mechanism_NN ._.
Each_DT agent_NN ''_'' s_NNS utility_NN ,_, ui_NN -LRB-_-LRB- g_NN -LRB-_-LRB- -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- =_JJ vi_LS -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- -LRB-_-LRB- di_FW di_FW -RRB-_-RRB- pi_NN -LRB-_-LRB- -RRB-_-RRB- ,_, is_VBZ a_DT quasi-linear_JJ function_NN of_IN its_PRP$ value_NN for_IN its_PRP$ job_NN -LRB-_-LRB- if_IN completed_VBN and_CC returned_VBN by_IN its_PRP$ true_JJ deadline_NN -RRB-_-RRB- and_CC the_DT payment_NN it_PRP makes_VBZ to_TO the_DT center_NN ._.
We_PRP assume_VBP that_IN each_DT agent_NN is_VBZ a_DT rational_JJ ,_, expected_JJ utility_NN maximizer_NN ._.
Agent_NNP declarations_NNS are_VBP restricted_JJ in_IN that_IN an_DT agent_NN can_MD not_RB declare_VB a_DT length_NN shorter_JJR than_IN the_DT true_JJ length_NN ,_, since_IN the_DT center_NN would_MD be_VB able_JJ to_TO detect_VB such_PDT a_DT lie_NN if_IN the_DT job_NN were_VBD completed_VBN ._.
On_IN the_DT other_JJ hand_NN ,_, in_IN the_DT general_JJ formulation_NN we_PRP will_MD allow_VB agents_NNS to_TO declare_VB longer_JJR lengths_NNS ,_, since_IN in_IN some_DT settings_NNS it_PRP may_MD be_VB possible_JJ add_VB unnecessary_JJ work_NN to_TO a_DT job_NN ._.
However_RB ,_, we_PRP will_MD also_RB consider_VB a_DT restricted_JJ formulation_NN in_IN which_WDT this_DT type_NN of_IN lie_NN is_VBZ not_RB possible_JJ ._.
The_DT declared_VBN release_NN time_NN ri_NN is_VBZ the_DT time_NN that_IN the_DT agent_NN chooses_VBZ to_TO submit_VB job_NN i_FW to_TO the_DT center_NN ,_, and_CC it_PRP can_MD not_RB precede_VB the_DT time_NN ri_NN at_IN which_WDT the_DT job_NN is_VBZ revealed_VBN to_TO the_DT agent_NN ._.
The_DT agent_NN can_MD declare_VB an_DT arbitrary_JJ deadline_NN or_CC value_NN ._.
To_TO summarize_VB ,_, agent_NN i_FW can_MD declare_VB any_DT type_NN i_FW =_JJ -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- such_JJ that_IN li_NN li_NN and_CC ri_NN ri_NN ._.
While_IN in_IN the_DT non-strategic_JJ setting_NN it_PRP was_VBD sufficient_JJ for_IN the_DT algorithm_NN to_TO know_VB the_DT upper_JJ bound_VBN k_NN on_IN the_DT ratio_NN max_NN min_NN ,_, in_IN the_DT mechanism_NN design_NN setting_NN we_PRP will_MD strengthen_VB this_DT assumption_NN so_IN that_IN the_DT mechanism_NN also_RB knows_VBZ min_NN -LRB-_-LRB- or_CC ,_, equivalently_RB ,_, the_DT range_NN -LSB-_-LRB- min_NN ,_, max_NN -RSB-_-RRB- of_IN possible_JJ value_NN densities_NNS -RRB-_-RRB- ._.
#_# Dover_NNP ,_, we_PRP note_VBP that_IN it_PRP is_VBZ similar_JJ in_IN its_PRP$ use_NN of_IN intervals_NNS and_CC its_PRP$ preference_NN for_IN the_DT active_JJ job_NN ._.
Also_RB ,_, we_PRP note_VBP that_IN the_DT lower_JJR bound_VBN we_PRP will_MD show_VB in_IN Section_NN #_# implies_VBZ that_IN false_JJ information_NN can_MD also_RB benefit_VB a_DT job_NN in_IN Dover_NNP ._.
3_CD Note_NN that_IN we_PRP could_MD then_RB force_VB agent_NN declarations_NNS to_TO satisfy_VB min_NN vi_LS li_FW max_FW ._.
However_RB ,_, this_DT restriction_NN would_MD not_RB 63_CD While_IN we_PRP feel_VBP that_IN it_PRP is_VBZ unlikely_JJ that_IN a_DT center_NN would_MD know_VB k_NN without_IN knowing_VBG this_DT range_NN ,_, we_PRP later_RB present_VBP a_DT mechanism_NN that_WDT does_VBZ not_RB depend_VB on_IN this_DT extra_JJ knowledge_NN in_IN a_DT restricted_JJ setting_NN ._.
The_DT restriction_NN on_IN the_DT schedule_NN is_VBZ now_RB that_IN S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- =_JJ i_FW implies_VBZ ri_NN t_NN ,_, to_TO capture_VB the_DT fact_NN that_IN a_DT job_NN can_MD not_RB be_VB scheduled_VBN on_IN the_DT processor_NN before_IN it_PRP is_VBZ declared_VBN to_TO the_DT mechanism_NN ._.
As_IN before_RB ,_, preemption_NN of_IN jobs_NNS is_VBZ allowed_VBN ,_, and_CC job_NN switching_NN takes_VBZ no_DT time_NN ._.
The_DT constraints_NNS due_JJ to_TO the_DT online_JJ mechanism_NN ''_'' s_NNS lack_VBP of_IN knowledge_NN of_IN the_DT future_NN are_VBP that_IN -LRB-_-LRB- t_NN -RRB-_-RRB- =_JJ -LRB-_-LRB- t_NN -RRB-_-RRB- implies_VBZ S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- =_JJ S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- ,_, and_CC -LRB-_-LRB- di_FW -RRB-_-RRB- =_JJ -LRB-_-LRB- di_FW -RRB-_-RRB- implies_VBZ pi_NN -LRB-_-LRB- -RRB-_-RRB- =_JJ pi_NN -LRB-_-LRB- -RRB-_-RRB- for_IN each_DT agent_NN i_FW ._.
The_DT setting_NN can_MD then_RB be_VB summarized_VBN as_IN follows_VBZ ._.
1Overview_NN of_IN the_DT Setting_NNP :_: for_IN all_DT t_NN do_VBP The_DT center_NN instantiates_VBZ S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- i_FW ,_, for_IN some_DT i_FW s_NNS ._.
t_NN ._.
ri_NN t_NN if_IN i_FW ,_, -LRB-_-LRB- ri_NN =_JJ t_NN -RRB-_-RRB- then_RB i_FW is_VBZ revealed_VBN to_TO agent_NN i_FW if_IN i_FW ,_, -LRB-_-LRB- t_NN ri_NN -RRB-_-RRB- and_CC agent_NN i_FW has_VBZ not_RB declared_VBN a_DT job_NN then_RB Agent_NNP i_FW can_MD declare_VB any_DT job_NN i_FW ,_, s_NNS ._.
t_NN ._.
ri_NN =_JJ t_NN and_CC li_NN li_NN if_IN i_FW ,_, -LRB-_-LRB- di_FW =_JJ t_NN -RRB-_-RRB- -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- li_NN -RRB-_-RRB- then_RB Completed_VBD job_NN i_FW is_VBZ returned_VBN to_TO agent_NN i_FW if_IN i_FW ,_, -LRB-_-LRB- di_FW =_JJ t_NN -RRB-_-RRB- then_RB Center_NNP sets_NNS and_CC collects_VBZ payment_NN pi_NN -LRB-_-LRB- -RRB-_-RRB- from_IN agent_NN i_FW 3_LS ._.
#_# Mechanism_NN Goals_NNS Our_PRP$ aim_NN as_IN mechanism_NN designer_NN is_VBZ to_TO maximize_VB the_DT value_NN of_IN completed_VBN jobs_NNS ,_, subject_JJ to_TO the_DT constraints_NNS of_IN incentive_NN compatibility_NN and_CC individual_JJ rationality_NN ._.
The_DT condition_NN for_IN -LRB-_-LRB- dominant_JJ strategy_NN -RRB-_-RRB- incentive_NN compatibility_NN is_VBZ that_IN for_IN each_DT agent_NN i_FW ,_, regardless_RB of_IN its_PRP$ true_JJ type_NN and_CC of_IN the_DT declared_VBN types_NNS of_IN all_DT other_JJ agents_NNS ,_, agent_NN i_FW can_MD not_RB increase_VB its_PRP$ utility_NN by_IN unilaterally_RB changing_VBG its_PRP$ declaration_NN ._.
Definition_NN #_# ._.
A_DT direct_JJ mechanism_NN satisfies_NNS incentive_NN compatibility_NN -LRB-_-LRB- IC_NN -RRB-_-RRB- if_IN i_FW ,_, i_FW ,_, i_FW ,_, i_FW :_: ui_NN -LRB-_-LRB- g_NN -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ui_NN -LRB-_-LRB- g_NN -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- From_IN an_DT agent_NN perspective_NN ,_, dominant_JJ strategies_NNS are_VBP desirable_JJ because_IN the_DT agent_NN does_VBZ not_RB have_VB to_TO reason_NN about_IN either_CC the_DT strategies_NNS of_IN the_DT other_JJ agents_NNS or_CC the_DT distribution_NN from_IN the_DT which_WDT other_JJ agent_NN ''_'' s_NNS types_NNS are_VBP drawn_VBN ._.
From_IN a_DT mechanism_NN designer_NN perspective_NN ,_, dominant_JJ strategies_NNS are_VBP important_JJ because_IN we_PRP can_MD reasonably_RB assume_VB that_IN an_DT agent_NN who_WP has_VBZ a_DT dominant_JJ strategy_NN will_MD play_VB according_VBG to_TO it_PRP ._.
For_IN these_DT reasons_NNS ,_, in_IN this_DT paper_NN we_PRP require_VBP dominant_JJ strategies_NNS ,_, as_IN opposed_VBN to_TO a_DT weaker_JJR equilibrium_NN concept_NN such_JJ as_IN Bayes-Nash_NNP ,_, under_IN which_WDT we_PRP could_MD improve_VB upon_IN our_PRP$ positive_JJ results_NNS ._.
#_# decrease_VB the_DT lower_JJR bound_VBN on_IN the_DT competitive_JJ ratio_NN ._.
4_LS A_DT possible_JJ argument_NN against_IN the_DT need_NN for_IN incentive_NN compatibility_NN is_VBZ that_IN an_DT agent_NN ''_'' s_NNS lie_VBP may_MD actually_RB improve_VB the_DT schedule_NN ._.
In_IN fact_NN ,_, this_DT was_VBD the_DT case_NN in_IN the_DT example_NN we_PRP showed_VBD for_IN the_DT false_JJ declaration_NN d2_NN =_JJ #_# ._.
#_# ._.
However_RB ,_, if_IN an_DT agent_NN lies_VBZ due_JJ to_TO incorrect_JJ beliefs_NNS over_IN the_DT future_JJ input_NN ,_, then_RB the_DT lie_NN could_MD instead_RB make_VB the_DT schedule_NN the_DT worse_JJR -LRB-_-LRB- for_IN example_NN ,_, if_IN job_NN #_# were_VBD never_RB released_VBN ,_, then_RB job_NN #_# would_MD have_VB been_VBN unnecessarily_RB abandoned_VBN -RRB-_-RRB- ._.
Furthermore_RB ,_, if_IN we_PRP do_VBP not_RB know_VB the_DT beliefs_NNS of_IN the_DT agents_NNS ,_, and_CC thus_RB can_MD not_RB predict_VB how_WRB they_PRP will_MD lie_VB ,_, then_RB we_PRP can_MD no_RB longer_RB provide_VB a_DT competitive_JJ guarantee_NN for_IN our_PRP$ mechanism_NN ._.
While_IN restricting_VBG ourselves_PRP to_TO incentive_NN compatible_JJ direct_JJ mechanisms_NNS may_MD seem_VB limiting_VBG at_IN first_RB ,_, the_DT Revelation_NNP Principle_NNP for_IN Dominant_JJ Strategies_NNS tells_VBZ us_PRP that_IN if_IN our_PRP$ goal_NN is_VBZ dominant_JJ strategy_NN implementation_NN ,_, then_RB we_PRP can_MD make_VB this_DT restriction_NN without_IN loss_NN of_IN generality_NN ._.
The_DT second_JJ goal_NN for_IN our_PRP$ mechanism_NN ,_, individual_JJ rationality_NN ,_, requires_VBZ that_IN agents_NNS who_WP truthfully_RB reveal_VBP their_PRP$ type_NN never_RB have_VBP negative_JJ utility_NN ._.
The_DT rationale_NN behind_IN this_DT goal_NN is_VBZ that_IN participation_NN in_IN the_DT mechanism_NN is_VBZ assumed_VBN to_TO be_VB voluntary_JJ ._.
Definition_NN #_# ._.
A_DT direct_JJ mechanism_NN satisfies_NNS individual_JJ rationality_NN -LRB-_-LRB- IR_NN -RRB-_-RRB- if_IN i_FW ,_, i_FW ,_, i_FW ,_, ui_NN -LRB-_-LRB- g_NN -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- #_# ._.
Finally_RB ,_, the_DT social_JJ welfare_NN function_NN that_IN we_PRP aim_VBP to_TO maximize_VB is_VBZ the_DT same_JJ as_IN the_DT objective_JJ function_NN of_IN the_DT non-strategic_JJ setting_NN :_: W_NN -LRB-_-LRB- o_NN ,_, -RRB-_-RRB- =_JJ i_FW vi_LS -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- ._.
As_IN in_IN the_DT nonstrategic_JJ setting_NN ,_, we_PRP will_MD evaluate_VB an_DT online_JJ mechanism_NN using_VBG competitive_JJ analysis_NN to_TO compare_VB it_PRP against_IN an_DT optimal_JJ oine_NN mechanism_NN -LRB-_-LRB- which_WDT we_PRP will_MD denote_VB by_IN offline_NN -RRB-_-RRB- ._.
An_DT oine_NN mechanism_NN knows_VBZ all_DT of_IN the_DT types_NNS at_IN time_NN #_# ,_, and_CC thus_RB can_MD always_RB achieve_VB W_NN -LRB-_-LRB- -RRB-_-RRB- ._.
#_# Definition_NNP #_# ._.
An_DT online_JJ mechanism_NN is_VBZ -LRB-_-LRB- strictly_RB -RRB-_-RRB- ccompetitive_JJ if_IN it_PRP satisfies_VBZ IC_NN and_CC IR_NN ,_, and_CC if_IN there_EX does_VBZ not_RB exist_VB a_DT profile_NN of_IN agent_NN types_NNS such_JJ that_IN cW_NN -LRB-_-LRB- g_NN -LRB-_-LRB- -RRB-_-RRB- ,_, -RRB-_-RRB- <_JJR W_NN -LRB-_-LRB- -RRB-_-RRB- ._.
4_LS ._.
RESULTS_NNS In_IN this_DT section_NN ,_, we_PRP first_RB present_JJ our_PRP$ main_JJ positive_JJ result_NN :_: a_DT -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# -_: competitive_JJ mechanism_NN -LRB-_-LRB- #_# -RRB-_-RRB- ._.
After_IN providing_VBG some_DT intuition_NN as_IN to_TO why_WRB #_# satisfies_NNS individual_JJ rationality_NN and_CC incentive_NN compatibility_NN ,_, we_PRP formally_RB prove_VBP first_RB these_DT two_CD properties_NNS and_CC then_RB the_DT competitive_JJ ratio_NN ._.
We_PRP then_RB consider_VBP a_DT special_JJ case_NN in_IN which_WDT k_NN =_JJ #_# and_CC agents_NNS can_MD not_RB lie_VB about_IN the_DT length_NN of_IN their_PRP$ job_NN ,_, which_WDT allows_VBZ us_PRP to_TO alter_VB this_DT mechanism_NN so_IN that_IN it_PRP no_RB longer_RB requires_VBZ either_CC knowledge_NN of_IN min_NN or_CC the_DT collection_NN of_IN payments_NNS from_IN agents_NNS ._.
Unlike_IN TD1_NN -LRB-_-LRB- version_NN #_# -RRB-_-RRB- and_CC Dover_NNP ,_, #_# gives_VBZ no_DT preference_NN to_TO the_DT active_JJ job_NN ._.
Instead_RB ,_, it_PRP always_RB executes_VBZ the_DT available_JJ job_NN with_IN the_DT highest_JJS priority_NN :_: -LRB-_-LRB- vi_LS +_CC k_NN ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- min_NN -RRB-_-RRB- ._.
Each_DT agent_NN whose_WP$ job_NN is_VBZ completed_VBN is_VBZ then_RB charged_VBN the_DT lowest_JJS value_NN that_IN it_PRP could_MD have_VB declared_VBN such_JJ that_IN its_PRP$ job_NN still_RB would_MD have_VB been_VBN completed_VBN ,_, holding_VBG constant_JJ the_DT rest_NN of_IN its_PRP$ declaration_NN ._.
By_IN the_DT use_NN of_IN a_DT payment_NN rule_NN similar_JJ to_TO that_DT of_IN a_DT secondprice_JJ auction_NN ,_, #_# satisfies_VBZ both_DT IC_NN with_IN respect_NN to_TO values_NNS and_CC IR_NN ._.
We_PRP now_RB argue_VBP why_WRB it_PRP satisfies_VBZ IC_NN with_IN respect_NN to_TO the_DT other_JJ three_CD characteristics_NNS ._.
Declaring_VBG an_DT improved_VBN job_NN -LRB-_-LRB- i_FW ._.
e_LS ._.
,_, declaring_VBG an_DT earlier_JJR release_NN time_NN ,_, a_DT shorter_JJR length_NN ,_, or_CC a_DT later_JJ deadline_NN -RRB-_-RRB- could_MD possibly_RB decrease_VB the_DT payment_NN of_IN an_DT agent_NN ._.
However_RB ,_, the_DT first_JJ two_CD lies_NNS are_VBP not_RB possible_JJ in_IN our_PRP$ setting_NN ,_, while_IN the_DT third_JJ would_MD cause_VB the_DT job_NN ,_, if_IN it_PRP is_VBZ completed_VBN ,_, to_TO be_VB returned_VBN to_TO the_DT agent_NN after_IN the_DT true_JJ deadline_NN ._.
This_DT is_VBZ the_DT reason_NN why_WRB it_PRP is_VBZ important_JJ to_TO always_RB return_VB a_DT completed_VBN job_NN at_IN its_PRP$ declared_VBN deadline_NN ,_, instead_RB of_IN at_IN the_DT point_NN at_IN which_WDT it_PRP is_VBZ completed_VBN ._.
5_CD Another_DT possibility_NN is_VBZ to_TO allow_VB only_RB the_DT agents_NNS to_TO know_VB their_PRP$ types_NNS at_IN time_NN #_# ,_, and_CC to_TO force_VB offline_JJ to_TO be_VB incentive_NN compatible_JJ so_IN that_IN agents_NNS will_MD truthfully_RB declare_VB their_PRP$ types_NNS at_IN time_NN #_# ._.
However_RB ,_, this_DT would_MD not_RB affect_VB our_PRP$ results_NNS ,_, since_IN executing_VBG a_DT VCG_NNP mechanism_NN at_IN time_NN #_# both_DT satisfies_NNS incentive_NN compatibility_NN and_CC always_RB maximizes_VBZ social_JJ welfare_NN ._.
64_CD Mechanism_NN #_# #_# Execute_VB S_NN -LRB-_-LRB- ,_, -RRB-_-RRB- according_VBG to_TO Algorithm_NNP #_# for_IN all_DT i_FW do_VBP if_IN ei_NN -LRB-_-LRB- ,_, di_FW -RRB-_-RRB- li_NNS -LCB-_-LRB- Agent_NNP i_FW ''_'' s_VBZ job_NN is_VBZ completed_VBN -RCB-_-RRB- then_RB pi_NN -LRB-_-LRB- -RRB-_-RRB- arg_NN minvi0_NN -LRB-_-LRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- else_RB pi_NN -LRB-_-LRB- -RRB-_-RRB- #_# Algorithm_NNP #_# for_IN all_DT t_NN do_VBP Avail_NNP -LCB-_-LRB- i_FW |_FW -LRB-_-LRB- t_NN ri_NN -RRB-_-RRB- -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- <_JJR li_NNS -RRB-_-RRB- -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- +_CC dit_FW li_FW -RRB-_-RRB- -RCB-_-RRB- -LCB-_-LRB- Set_VB of_IN all_DT released_VBN ,_, non-completed_JJ ,_, non-abandoned_JJ jobs_NNS -RCB-_-RRB- if_IN Avail_NN =_JJ then_RB S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- arg_NN maxiAvail_NN -LRB-_-LRB- vi_LS +_CC k_NN ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- min_NN -RRB-_-RRB- -LCB-_-LRB- Break_VB ties_NNS in_IN favor_NN of_IN lower_JJR ri_NNS -RCB-_-RRB- else_RB S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- #_# It_PRP remains_VBZ to_TO argue_VB why_WRB an_DT agent_NN does_VBZ not_RB have_VB incentive_NN to_TO worsen_VB its_PRP$ job_NN ._.
The_DT only_JJ possible_JJ effects_NNS of_IN an_DT inflated_JJ length_NN are_VBP delaying_VBG the_DT completion_NN of_IN the_DT job_NN and_CC causing_VBG it_PRP to_TO be_VB abandoned_VBN ,_, and_CC the_DT only_JJ possible_JJ effects_NNS of_IN an_DT earlier_JJR declared_VBD deadline_NN are_VBP causing_VBG to_TO be_VB abandoned_VBN and_CC causing_VBG it_PRP to_TO be_VB returned_VBN earlier_RB -LRB-_-LRB- which_WDT has_VBZ no_DT effect_NN on_IN the_DT agent_NN ''_'' s_NNS utility_NN in_IN our_PRP$ setting_NN -RRB-_-RRB- ._.
On_IN the_DT other_JJ hand_NN ,_, it_PRP is_VBZ less_RBR obvious_JJ why_WRB agents_NNS do_VBP not_RB have_VB incentive_NN to_TO declare_VB a_DT later_JJ release_NN time_NN ._.
Consider_VB a_DT mechanism_NN #_# that_WDT differs_VBZ from_IN #_# in_IN that_IN it_PRP does_VBZ not_RB preempt_VB the_DT active_JJ job_NN i_FW unless_IN there_EX exists_VBZ another_DT job_NN j_NN such_JJ that_IN -LRB-_-LRB- vi_LS +_CC kli_NNS -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- min_NN -RRB-_-RRB- <_JJR vj_NN ._.
Note_VB that_DT as_IN an_DT active_JJ job_NN approaches_NNS completion_NN in_IN #_# ,_, its_PRP$ condition_NN for_IN preemption_NN approaches_NNS that_WDT of_IN #_# ._.
However_RB ,_, the_DT types_NNS in_IN Table_NNP #_# for_IN the_DT case_NN of_IN k_NN =_JJ #_# show_VBP why_WRB an_DT agent_NN may_MD have_VB incentive_NN to_TO delay_VB the_DT arrival_NN of_IN its_PRP$ job_NN under_IN #_# ._.
Job_NNP #_# becomes_VBZ active_JJ at_IN time_NN #_# ,_, and_CC job_NN #_# is_VBZ abandoned_VBN upon_IN its_PRP$ release_NN at_IN time_NN #_# ,_, because_IN ##_NN +_CC ##_NN =_JJ v1_NN +_CC l1_NN >_JJR v2_NN =_JJ ##_CD ._.
Then_RB ,_, at_IN time_NN #_# ,_, job_NN #_# is_VBZ preempted_VBN by_IN job_NN 3_CD ,_, because_IN ##_NN +_CC ##_NN =_JJ v1_NN +_CC l1_NN <_JJR v3_CD =_JJ ##_NN ._.
Job_NNP #_# then_RB executes_VBZ to_TO completion_NN ,_, forcing_VBG job_NN #_# to_TO be_VB abandoned_VBN ._.
However_RB ,_, job_NN 2_CD had_VBD more_JJR weight_NN than_IN job_NN #_# ,_, and_CC would_MD have_VB prevented_VBN job_NN #_# from_IN being_VBG executed_VBN if_IN it_PRP had_VBD been_VBN the_DT active_JJ job_NN at_IN time_NN #_# ,_, since_IN ##_NN +_CC ##_NN =_JJ v2_NN +_CC l2_NN >_JJR v3_NN =_JJ ##_CD ._.
Thus_RB ,_, if_IN agent_NN 1_CD had_VBD falsely_RB declared_VBN r1_NN =_JJ ##_CD ,_, then_RB job_NN #_# would_MD have_VB been_VBN abandoned_VBN at_IN time_NN #_# ,_, and_CC job_NN #_# would_MD have_VB completed_VBN over_IN the_DT range_NN -LSB-_-LRB- ##_CD ,_, ##_CD -RSB-_-RRB- ._.
Job_NNP ri_NNP di_NNP li_NNP vi_LS 1_CD #_# ##_CD ##_CD ##_NN 2_CD #_# ##_CD ##_CD ##_NN 3_CD #_# ##_CD ##_CD ##_NN 0_CD #_# ##_CD ##_CD ##_NN 6_CD ?_.
6_CD ?_.
6_CD ?_.
Table_NNP #_# :_: Jobs_NNP used_VBD to_TO show_VB why_WRB a_DT slightly_RB altered_JJ version_NN of_IN #_# would_MD not_RB be_VB incentive_NN compatible_JJ with_IN respect_NN to_TO release_VB times_NNS ._.
Intuitively_RB ,_, #_# avoids_VBZ this_DT problem_NN because_IN of_IN two_CD properties_NNS ._.
First_RB ,_, when_WRB a_DT job_NN becomes_VBZ active_JJ ,_, it_PRP must_MD have_VB a_DT greater_JJR priority_NN than_IN all_DT other_JJ available_JJ jobs_NNS ._.
Second_RB ,_, because_IN a_DT job_NN ''_'' s_NNS priority_NN can_MD only_RB increase_VB through_IN the_DT increase_NN of_IN its_PRP$ elapsed_JJ time_NN ,_, ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- ,_, the_DT rate_NN of_IN increase_NN of_IN a_DT job_NN ''_'' s_NNS priority_NN is_VBZ independent_JJ of_IN its_PRP$ characteristics_NNS ._.
These_DT two_CD properties_NNS together_RB imply_VBP that_IN ,_, while_IN a_DT job_NN is_VBZ active_JJ ,_, there_EX can_MD not_RB exist_VB a_DT time_NN at_IN which_WDT its_PRP$ priority_NN is_VBZ less_JJR than_IN the_DT priority_NN that_IN one_CD of_IN these_DT other_JJ jobs_NNS would_MD have_VB achieved_VBN by_IN executing_VBG on_IN the_DT processor_NN instead_RB ._.
4_LS ._.
#_# Proof_NNP of_IN Individual_NNP Rationality_NNP and_CC Incentive_NNP Compatibility_NNP After_IN presenting_VBG the_DT -LRB-_-LRB- trivial_JJ -RRB-_-RRB- proof_NN of_IN IR_NNP ,_, we_PRP break_VBP the_DT proof_NN of_IN IC_NN into_IN lemmas_NNS ._.
Theorem_NNP #_# ._.
Mechanism_NN #_# satisfies_NNS individual_JJ rationality_NN ._.
Proof_NN ._.
For_IN arbitrary_JJ i_FW ,_, i_FW ,_, i_FW ,_, if_IN job_NN i_FW is_VBZ not_RB completed_VBN ,_, then_RB agent_NN i_FW pays_VBZ nothing_NN and_CC thus_RB has_VBZ a_DT utility_NN of_IN zero_CD ;_: that_DT is_VBZ ,_, pi_NN -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- =_JJ #_# and_CC ui_NN -LRB-_-LRB- g_NN -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- =_JJ #_# ._.
On_IN the_DT other_JJ hand_NN ,_, if_IN job_NN i_FW is_VBZ completed_VBN ,_, then_RB its_PRP$ value_NN must_MD exceed_VB agent_NN i_FW ''_'' s_VBZ payment_NN ._.
Formally_RB ,_, ui_NN -LRB-_-LRB- g_NN -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- =_JJ vi_LS arg_NN minvi0_NN -LRB-_-LRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- #_# must_MD hold_VB ,_, since_IN vi_LS =_JJ vi_LS satisfies_VBZ the_DT condition_NN ._.
To_TO prove_VB IC_NN ,_, we_PRP need_VBP to_TO show_VB that_IN for_IN an_DT arbitrary_JJ agent_NN i_FW ,_, and_CC an_DT arbitrary_JJ profile_NN i_FW of_IN declarations_NNS of_IN the_DT other_JJ agents_NNS ,_, agent_NN i_FW can_MD never_RB gain_VB by_IN making_VBG a_DT false_JJ declaration_NN i_FW =_JJ i_FW ,_, subject_JJ to_TO the_DT constraints_NNS that_WDT ri_VBP ri_NN and_CC li_NN li_NN ._.
We_PRP start_VBP by_IN showing_VBG that_IN ,_, regardless_RB of_IN vi_LS ,_, if_IN truthful_JJ declarations_NNS of_IN ri_NN ,_, di_FW ,_, and_CC li_NNS do_VBP not_RB cause_VB job_NN i_FW to_TO be_VB completed_VBN ,_, then_RB worse_JJR declarations_NNS of_IN these_DT variables_NNS -LRB-_-LRB- that_WDT is_VBZ ,_, declarations_NNS that_WDT satisfy_VBP ri_NN ri_NN ,_, li_NN li_NN and_CC di_FW di_FW -RRB-_-RRB- can_MD never_RB cause_VB the_DT job_NN to_TO be_VB completed_VBN ._.
We_PRP break_VBP this_DT part_NN of_IN the_DT proof_NN into_IN two_CD lemmas_NNS ,_, first_RB showing_VBG that_IN it_PRP holds_VBZ for_IN the_DT release_NN time_NN ,_, regardless_RB of_IN the_DT declarations_NNS of_IN the_DT other_JJ variables_NNS ,_, and_CC then_RB for_IN length_NN and_CC deadline_NN ._.
Lemma_NNP #_# ._.
In_IN mechanism_NN #_# ,_, the_DT following_VBG condition_NN holds_VBZ for_IN all_DT i_FW ,_, i_FW ,_, i_FW :_: vi_LS ,_, li_FW li_FW ,_, di_FW di_FW ,_, ri_FW ri_FW ,_, ei_FW -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW =_JJ ei_NN -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW Proof_FW ._.
Assume_VB by_IN contradiction_NN that_IN this_DT condition_NN does_VBZ not_RB hold_VB -_: that_WDT is_VBZ ,_, job_NN i_FW is_VBZ not_RB completed_VBN when_WRB ri_NN is_VBZ truthfully_RB declared_VBN ,_, but_CC is_VBZ completed_VBN for_IN some_DT false_JJ declaration_NN ri_NN ri_NN ._.
We_PRP first_RB analyze_VBP the_DT case_NN in_IN which_WDT the_DT release_NN time_NN is_VBZ truthfully_RB declared_VBN ,_, and_CC then_RB we_PRP show_VBP that_IN job_NN i_FW can_MD not_RB be_VB completed_VBN when_WRB agent_NN i_FW delays_NNS submitting_VBG it_PRP to_TO the_DT center_NN ._.
Case_NN I_NN :_: Agent_NNP i_FW declares_VBZ i_FW =_JJ -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ._.
First_RB ,_, define_VB the_DT following_VBG three_CD points_NNS in_IN the_DT execution_NN of_IN job_NN i_FW ._.
Let_VB ts_NN =_JJ arg_NN mint_NN S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ i_FW be_VB the_DT time_NN that_WDT job_NN i_FW first_JJ starts_NNS execution_NN ._.
Let_VB tp_NN =_JJ arg_NN mint_NN >_JJR ts_NNS S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ i_FW be_VB the_DT time_NN that_WDT job_NN i_FW is_VBZ first_JJ preempted_VBN ._.
Let_VB ta_NN =_JJ arg_NN mint_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- +_CC di_FW t_NN <_JJR li_CD be_VB the_DT time_NN that_WDT job_NN i_FW is_VBZ abandoned_VBN ._.
65_CD If_IN ts_NNS and_CC tp_NN are_VBP undefined_JJ because_IN job_NN i_FW never_RB becomes_VBZ active_JJ ,_, then_RB let_VB ts_NN =_JJ tp_NN =_JJ ta_NN ._.
Also_RB ,_, partition_NN the_DT jobs_NNS declared_VBN by_IN other_JJ agents_NNS before_IN ta_NN into_IN the_DT following_VBG three_CD sets_NNS ._.
X_NN =_SYM -LCB-_-LRB- j_NN |_NN -LRB-_-LRB- rj_NN <_JJR tp_NN -RRB-_-RRB- -LRB-_-LRB- j_NN =_JJ i_LS -RRB-_-RRB- -RCB-_-RRB- consists_VBZ of_IN the_DT jobs_NNS -LRB-_-LRB- other_JJ than_IN i_LS -RRB-_-RRB- that_WDT arrive_VBP before_IN job_NN i_FW is_VBZ first_JJ preempted_VBN ._.
Y_NN =_SYM -LCB-_-LRB- j_NN |_NN -LRB-_-LRB- tp_NN rj_NN ta_NN -RRB-_-RRB- -LRB-_-LRB- vj_NN >_JJR vi_LS +_CC kei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, rj_NN -RRB-_-RRB- -RCB-_-RRB- consists_VBZ of_IN the_DT jobs_NNS that_WDT arrive_VBP in_IN the_DT range_NN -LSB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- and_CC that_IN when_WRB they_PRP arrive_VBP have_VBP higher_JJR priority_NN than_IN job_NN i_FW -LRB-_-LRB- note_NN that_IN we_PRP are_VBP make_VB use_NN of_IN the_DT normalization_NN -RRB-_-RRB- ._.
Z_NN =_SYM -LCB-_-LRB- j_NN |_NN -LRB-_-LRB- tp_NN rj_NN ta_NN -RRB-_-RRB- -LRB-_-LRB- vj_NN vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, rj_NN -RRB-_-RRB- -RCB-_-RRB- consists_VBZ of_IN the_DT jobs_NNS that_WDT arrive_VBP in_IN the_DT range_NN -LSB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- and_CC that_IN when_WRB they_PRP arrive_VBP have_VB lower_JJR priority_NN than_IN job_NN i_FW ._.
We_PRP now_RB show_VBP that_IN all_DT active_JJ jobs_NNS during_IN the_DT range_NN -LRB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- must_MD be_VB either_CC i_FW or_CC in_IN the_DT set_VBN Y_NN ._.
Unless_IN tp_NN =_JJ ta_NN -LRB-_-LRB- in_IN which_WDT case_NN this_DT property_NN trivially_RB holds_VBZ -RRB-_-RRB- ,_, it_PRP must_MD be_VB the_DT case_NN that_WDT job_NN i_FW has_VBZ a_DT higher_JJR priority_NN than_IN an_DT arbitrary_JJ job_NN x_NN X_NN at_IN time_NN tp_NN ,_, since_IN at_IN the_DT time_NN just_RB preceding_VBG tp_NN job_NN x_NN was_VBD available_JJ and_CC job_NN i_FW was_VBD active_JJ ._.
Formally_RB ,_, vx_NN +_CC k_NN ex_FW -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tp_NN -RRB-_-RRB- <_JJR vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tp_NN -RRB-_-RRB- must_MD hold_VB ._.
#_# We_PRP can_MD then_RB show_VB that_IN ,_, over_IN the_DT range_NN -LSB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- ,_, no_DT job_NN x_NN X_NN runs_VBZ on_IN the_DT processor_NN ._.
Assume_VB by_IN contradiction_NN that_IN this_DT is_VBZ not_RB true_JJ ._.
Let_VB tf_NN -LSB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- be_VB the_DT earliest_JJS time_NN in_IN this_DT range_NN that_IN some_DT job_NN x_NN X_NN is_VBZ active_JJ ,_, which_WDT implies_VBZ that_IN ex_FW -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tf_NN -RRB-_-RRB- =_JJ ex_FW -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tp_NN -RRB-_-RRB- ._.
We_PRP can_MD then_RB show_VB that_IN job_NN i_FW has_VBZ a_DT higher_JJR priority_NN at_IN time_NN tf_NN as_IN follows_VBZ :_: vx_NN +_CC kex_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tf_NN -RRB-_-RRB- =_JJ vx_NN +_CC kex_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tp_NN -RRB-_-RRB- <_JJR vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tp_NN -RRB-_-RRB- vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tf_NN -RRB-_-RRB- ,_, contradicting_VBG the_DT fact_NN that_IN job_NN x_NN is_VBZ active_JJ at_IN time_NN tf_NN ._.
A_DT similar_JJ argument_NN applies_VBZ to_TO an_DT arbitrary_JJ job_NN z_SYM Z_NN ,_, starting_VBG at_IN it_PRP release_VBP time_NN rz_NN >_JJR tp_NN ,_, since_IN by_IN definition_NN job_NN i_FW has_VBZ a_DT higher_JJR priority_NN at_IN that_DT time_NN ._.
The_DT only_JJ remaining_VBG jobs_NNS that_WDT can_MD be_VB active_JJ over_IN the_DT range_NN -LRB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- are_VBP i_FW and_CC those_DT in_IN the_DT set_VBN Y_NN ._.
Case_NN II_CD :_: Agent_NNP i_FW declares_VBZ i_FW =_JJ -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, where_WRB ri_NN >_JJR ri_NN ._.
We_PRP now_RB show_VBP that_IN job_NN i_FW can_MD not_RB be_VB completed_VBN in_IN this_DT case_NN ,_, given_VBN that_IN it_PRP was_VBD not_RB completed_VBN in_IN case_NN I_PRP ._.
First_RB ,_, we_PRP can_MD restrict_VB the_DT range_NN of_IN ri_NN that_IN we_PRP need_VBP to_TO consider_VB as_IN follows_VBZ ._.
Declaring_VBG ri_NN -LRB-_-LRB- ri_NN ,_, ts_NN -RSB-_-RRB- would_MD not_RB affect_VB the_DT schedule_NN ,_, since_IN ts_NNS would_MD still_RB be_VB the_DT first_JJ time_NN that_WDT job_NN i_FW executes_VBZ ._.
Also_RB ,_, declaring_VBG ri_NN >_JJR ta_NN could_MD not_RB cause_VB the_DT job_NN to_TO be_VB completed_VBN ,_, since_IN di_FW ta_FW <_JJR li_NN holds_VBZ ,_, which_WDT implies_VBZ that_IN job_NN i_FW would_MD be_VB abandoned_VBN at_IN its_PRP$ release_NN ._.
Thus_RB ,_, we_PRP can_MD restrict_VB consideration_NN to_TO ri_NN -LRB-_-LRB- ts_NNS ,_, ta_NN -RSB-_-RRB- ._.
In_IN order_NN for_IN declaring_VBG i_FW to_TO cause_VB job_NN i_FW to_TO be_VB completed_VBN ,_, a_DT necessary_JJ condition_NN is_VBZ that_IN the_DT execution_NN of_IN some_DT job_NN yc_NN Y_NN must_MD change_VB during_IN the_DT range_NN -LRB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- ,_, since_IN the_DT only_JJ jobs_NNS other_JJ than_IN i_FW that_WDT are_VBP active_JJ during_IN that_DT range_NN are_VBP in_IN Y_NN ._.
Let_VB tc_NN =_JJ arg_NN mint_NN -LRB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- -LSB-_-LRB- yc_NN Y_NN ,_, -LRB-_-LRB- S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ yc_NN -RRB-_-RRB- -LRB-_-LRB- S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ yc_NN -RRB-_-RRB- -RSB-_-RRB- be_VB the_DT first_JJ time_NN that_IN such_PDT a_DT change_NN occurs_VBZ ._.
We_PRP will_MD now_RB show_VB that_IN for_IN any_DT ri_NN -LRB-_-LRB- ts_NNS ,_, ta_NN -RSB-_-RRB- ,_, there_EX can_MD not_RB exist_VB a_DT job_NN with_IN higher_JJR priority_NN than_IN yc_NN at_IN time_NN tc_NN ,_, contradicting_VBG -LRB-_-LRB- S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ yc_NN -RRB-_-RRB- ._.
First_JJ note_NN that_WDT job_NN i_FW can_MD not_RB have_VB a_DT higher_JJR priority_NN ,_, since_IN there_EX would_MD have_VB to_TO exist_VB a_DT t_NN -LRB-_-LRB- tp_NN ,_, tc_NN -RRB-_-RRB- such_JJ that_IN y_NN 6_CD For_IN simplicity_NN ,_, when_WRB we_PRP give_VBP the_DT formal_JJ condition_NN for_IN a_DT job_NN x_NN to_TO have_VB a_DT higher_JJR priority_NN than_IN another_DT job_NN y_NN ,_, we_PRP will_MD assume_VB that_IN job_NN x_NN ''_'' s_NNS priority_NN is_VBZ strictly_RB greater_JJR than_IN job_NN y_NN ''_'' s_NNS ,_, because_RB ,_, in_IN the_DT case_NN of_IN a_DT tie_NN that_WDT favors_VBZ x_NN ,_, future_JJ ties_NNS would_MD also_RB be_VB broken_VBN in_RP favor_NN of_IN job_NN x_NN ._.
Y_NN ,_, -LRB-_-LRB- S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ y_NN -RRB-_-RRB- -LRB-_-LRB- S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ i_LS -RRB-_-RRB- ,_, contradicting_VBG the_DT definition_NN of_IN tc_NN ._.
Now_RB consider_VB an_DT arbitrary_JJ y_NN Y_NN such_JJ that_IN y_NN =_JJ yc_NN ._.
In_IN case_NN I_CD ,_, we_PRP know_VBP that_IN job_NN y_NN has_VBZ lower_JJR priority_NN than_IN yc_NN at_IN time_NN tc_NN ;_: that_DT is_VBZ ,_, vy_NN +_CC key_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- <_JJR vyc_NN +_CC keyc_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- ._.
Thus_RB ,_, moving_VBG to_TO case_NN II_CD ,_, job_NN y_NN must_MD replace_VB some_DT other_JJ job_NN before_IN tc_NN ._.
Since_IN ry_NN tp_NN ,_, the_DT condition_NN is_VBZ that_IN there_EX must_MD exist_VB some_DT t_NN -LRB-_-LRB- tp_NN ,_, tc_NN -RRB-_-RRB- such_JJ that_IN w_FW Y_NN -LCB-_-LRB- i_FW -RCB-_-RRB- ,_, -LRB-_-LRB- S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ w_NN -RRB-_-RRB- -LRB-_-LRB- S_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, t_NN -RRB-_-RRB- =_JJ y_NN -RRB-_-RRB- ._.
Since_IN w_NN Y_NN would_MD contradict_VB the_DT definition_NN of_IN tc_NN ,_, we_PRP know_VBP that_IN w_NN =_JJ i_LS ._.
That_DT is_VBZ ,_, the_DT job_NN that_IN y_NN replaces_VBZ must_MD be_VB i_LS ._.
By_IN definition_NN of_IN the_DT set_VBN Y_NN ,_, we_PRP know_VBP that_IN vy_NN >_JJR vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, ry_NN -RRB-_-RRB- ._.
Thus_RB ,_, if_IN ry_NN t_NN ,_, then_RB job_NN i_FW could_MD not_RB have_VB executed_VBN instead_RB of_IN y_NN in_IN case_NN I_PRP ._.
On_IN the_DT other_JJ hand_NN ,_, if_IN ry_NN >_JJR t_NN ,_, then_RB job_NN y_NN obviously_RB could_MD not_RB execute_VB at_IN time_NN t_NN ,_, contradicting_VBG the_DT existence_NN of_IN such_PDT a_DT time_NN t_NN ._.
Now_RB consider_VB an_DT arbitrary_JJ job_NN x_NN X_NN ._.
We_PRP know_VBP that_IN in_IN case_NN I_PRP job_NN i_FW has_VBZ a_DT higher_JJR priority_NN than_IN job_NN x_NN at_IN time_NN ts_NNS ,_, or_CC ,_, formally_RB ,_, that_IN vx_NN +_CC k_NN ex_FW -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, ts_NNS -RRB-_-RRB- <_JJR vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, ts_NNS -RRB-_-RRB- ._.
We_PRP also_RB know_VBP that_IN vi_LS +_CC kei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- <_JJR vyc_NN +_CC k_NN eyc_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- ._.
Since_IN delaying_VBG i_FW ''_'' s_VBZ arrival_NN will_MD not_RB affect_VB the_DT execution_NN up_IN to_TO time_NN ts_NNS ,_, and_CC since_IN job_NN x_NN can_MD not_RB execute_VB instead_RB of_IN a_DT job_NN y_NN Y_NN at_IN any_DT time_NN t_NN -LRB-_-LRB- tp_NN ,_, tc_NN -RSB-_-RRB- by_IN definition_NN of_IN tc_NN ,_, the_DT only_JJ way_NN for_IN job_NN x_NN ''_'' s_NNS priority_NN to_TO increase_VB before_IN tc_NN as_IN we_PRP move_VBP from_IN case_NN I_CD to_TO II_CD is_VBZ to_TO replace_VB job_NN i_FW over_IN the_DT range_NN -LRB-_-LRB- ts_NNS ,_, tc_NN -RSB-_-RRB- ._.
Thus_RB ,_, an_DT upper_JJ bound_VBN on_IN job_NN x_NN ''_'' s_NNS priority_NN when_WRB agent_NN i_FW declares_VBZ i_FW is_VBZ :_: vx_NN +_CC k_NN ex_FW -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, ts_NNS -RRB-_-RRB- +_CC ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, ts_NNS -RRB-_-RRB- <_JJR vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, ts_NNS -RRB-_-RRB- +_CC ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, ts_NNS -RRB-_-RRB- =_JJ vi_LS +_CC k_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- <_JJR vyc_NN +_CC k_NN eyc_NN -LRB-_-LRB- -LRB-_-LRB- i_FW ,_, i_LS -RRB-_-RRB- ,_, tc_NN -RRB-_-RRB- ._.
Thus_RB ,_, even_RB at_IN this_DT upper_JJ bound_VBN ,_, job_NN yc_NN would_MD execute_VB instead_RB of_IN job_NN x_NN at_IN time_NN tc_NN ._.
A_DT similar_JJ argument_NN applies_VBZ to_TO an_DT arbitrary_JJ job_NN z_SYM Z_NN ,_, starting_VBG at_IN it_PRP release_VBP time_NN rz_NN ._.
Since_IN the_DT sets_NNS -LCB-_-LRB- i_FW -RCB-_-RRB- ,_, X_NN ,_, Y_NN ,_, Z_NN partition_NN the_DT set_NN of_IN jobs_NNS released_VBN before_IN ta_NN ,_, we_PRP have_VBP shown_VBN that_IN no_DT job_NN could_MD execute_VB instead_RB of_IN job_NN yc_NN ,_, contradicting_VBG the_DT existence_NN of_IN tc_NN ,_, and_CC completing_VBG the_DT proof_NN ._.
Lemma_NNP #_# ._.
In_IN mechanism_NN #_# ,_, the_DT following_VBG condition_NN holds_VBZ for_IN all_DT i_FW ,_, i_FW ,_, i_FW :_: vi_LS ,_, li_FW li_FW ,_, di_FW di_FW ,_, ei_FW -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW =_JJ ei_NN -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW Proof_FW ._.
Assume_VB by_IN contradiction_NN there_EX exists_VBZ some_DT instantiation_NN of_IN the_DT above_JJ variables_NNS such_JJ that_IN job_NN i_FW is_VBZ not_RB completed_VBN when_WRB li_NNS and_CC di_FW are_VBP truthfully_RB declared_VBN ,_, but_CC is_VBZ completed_VBN for_IN some_DT pair_NN of_IN false_JJ declarations_NNS li_VBP li_NN and_CC di_FW di_FW ._.
Note_VB that_IN the_DT only_JJ effect_NN that_WDT di_FW and_CC li_FW have_VBP on_IN the_DT execution_NN of_IN the_DT algorithm_NN is_VBZ on_IN whether_IN or_CC not_RB i_FW Avail_FW ._.
Specifically_RB ,_, they_PRP affect_VBP the_DT two_CD conditions_NNS :_: -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- <_JJR li_NNS -RRB-_-RRB- and_CC -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- +_CC di_FW t_NN li_NNS -RRB-_-RRB- ._.
Because_IN job_NN i_FW is_VBZ completed_VBN when_WRB li_NNS and_CC di_FW are_VBP declared_VBN ,_, the_DT former_JJ condition_NN -LRB-_-LRB- for_IN completion_NN -RRB-_-RRB- must_MD become_VB false_JJ before_IN the_DT latter_JJ ._.
Since_IN truthfully_RB declaring_VBG li_NNS li_NNS and_CC di_FW di_FW will_MD only_RB make_VB the_DT former_JJ condition_NN become_VBN false_JJ earlier_JJR and_CC the_DT latter_JJ condition_NN become_VBN false_JJ later_RB ,_, the_DT execution_NN of_IN the_DT algorithm_NN will_MD not_RB be_VB affected_VBN when_WRB moving_VBG to_TO truthful_JJ declarations_NNS ,_, and_CC job_NN i_FW will_MD be_VB completed_VBN ,_, a_DT contradiction_NN ._.
We_PRP now_RB use_VBP these_DT two_CD lemmas_NNS to_TO show_VB that_IN the_DT payment_NN for_IN a_DT completed_VBN job_NN can_MD only_RB increase_VB by_IN falsely_RB declaring_VBG worse_JJR li_NNS ,_, di_FW ,_, and_CC ri_NN ._.
66_CD Lemma_NNP #_# ._.
In_IN mechanism_NN #_# ,_, the_DT following_VBG condition_NN holds_VBZ for_IN all_DT i_FW ,_, i_FW ,_, i_FW :_: li_NNS li_NNS ,_, di_FW di_FW ,_, ri_FW ri_FW ,_, arg_NN min_NN vi0_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW arg_FW min_NN vi0_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW Proof_FW ._.
Assume_VB by_IN contradiction_NN that_IN this_DT condition_NN does_VBZ not_RB hold_VB ._.
This_DT implies_VBZ that_IN there_EX exists_VBZ some_DT value_NN vi_LS such_PDT that_IN the_DT condition_NN -LRB-_-LRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- holds_VBZ ,_, but_CC -LRB-_-LRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- does_VBZ not_RB ._.
Applying_VBG Lemmas_NNP #_# and_CC #_# :_: -LRB-_-LRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- =_JJ -LRB-_-LRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- =_JJ -LRB-_-LRB- ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NNS -RRB-_-RRB- ,_, a_DT contradiction_NN ._.
Finally_RB ,_, the_DT following_VBG lemma_NN tells_VBZ us_PRP that_IN the_DT completion_NN of_IN a_DT job_NN is_VBZ monotonic_JJ in_IN its_PRP$ declared_VBN value_NN ._.
Lemma_NNP #_# ._.
In_IN mechanism_NN #_# ,_, the_DT following_VBG condition_NN holds_VBZ for_IN all_DT i_FW ,_, i_FW ,_, i_FW :_: vi_LS vi_LS ,_, ei_NN -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW =_JJ ei_NN -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW li_FW The_DT proof_NN ,_, by_IN contradiction_NN ,_, of_IN this_DT lemma_NN is_VBZ omitted_VBN because_IN it_PRP is_VBZ essentially_RB identical_JJ to_TO that_DT of_IN Lemma_NNP #_# for_IN ri_NN ._.
In_IN case_NN I_CD ,_, agent_NN i_FW declares_VBZ -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- and_CC the_DT job_NN is_VBZ not_RB completed_VBN ,_, while_IN in_IN case_NN II_CD he_PRP declares_VBZ -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- and_CC the_DT job_NN is_VBZ completed_VBN ._.
The_DT analysis_NN of_IN the_DT two_CD cases_NNS then_RB proceeds_VBZ as_IN before_IN -_: the_DT execution_NN will_MD not_RB change_VB up_RP to_TO time_NN ts_NNS because_IN the_DT initial_JJ priority_NN of_IN job_NN i_FW decreases_VBZ as_IN we_PRP move_VBP from_IN case_NN I_CD to_TO II_CD ;_: and_CC ,_, as_IN a_DT result_NN ,_, there_EX can_MD not_RB be_VB a_DT change_NN in_IN the_DT execution_NN of_IN a_DT job_NN other_JJ than_IN i_FW over_IN the_DT range_NN -LRB-_-LRB- tp_NN ,_, ta_NN -RSB-_-RRB- ._.
We_PRP can_MD now_RB combine_VB the_DT lemmas_NNS to_TO show_VB that_IN no_DT profitable_JJ deviation_NN is_VBZ possible_JJ ._.
Theorem_NNP #_# ._.
Mechanism_NN #_# satisfies_NNS incentive_NN compatibility_NN ._.
Proof_NN ._.
For_IN an_DT arbitrary_JJ agent_NN i_FW ,_, we_PRP know_VBP that_IN ri_NN ri_NN and_CC li_NN li_NNS hold_VBP by_IN assumption_NN ._.
We_PRP also_RB know_VBP that_IN agent_NN i_FW has_VBZ no_DT incentive_NN to_TO declare_VB di_FW >_JJR di_FW ,_, because_IN job_NN i_FW would_MD never_RB be_VB returned_VBN before_IN its_PRP$ true_JJ deadline_NN ._.
Then_RB ,_, because_IN the_DT payment_NN function_NN is_VBZ non-negative_JJ ,_, agent_NN i_FW ''_'' s_VBZ utility_NN could_MD not_RB exceed_VB zero_CD ._.
By_IN IR_NN ,_, this_DT is_VBZ the_DT minimum_JJ utility_NN it_PRP would_MD achieve_VB if_IN it_PRP truthfully_RB declared_VBD i_LS ._.
Thus_RB ,_, we_PRP can_MD restrict_VB consideration_NN to_TO i_FW that_WDT satisfy_VBP ri_NN ri_NN ,_, li_NN li_NN ,_, and_CC di_FW di_FW ._.
Again_RB using_VBG IR_NNP ,_, we_PRP can_MD further_RB restrict_VB consideration_NN to_TO i_FW that_WDT cause_VBP job_NN i_FW to_TO be_VB completed_VBN ,_, since_IN any_DT other_JJ i_FW yields_VBZ a_DT utility_NN of_IN zero_CD ._.
If_IN truthful_JJ declaration_NN of_IN i_FW causes_VBZ job_NN i_FW to_TO be_VB completed_VBN ,_, then_RB by_IN Lemma_NNP #_# any_DT such_JJ false_JJ declaration_NN i_FW could_MD not_RB decrease_VB the_DT payment_NN of_IN agent_NN i_FW ._.
On_IN the_DT other_JJ hand_NN ,_, if_IN truthful_JJ declaration_NN does_VBZ not_RB cause_VB job_NN i_FW to_TO be_VB completed_VBN ,_, then_RB declaring_VBG such_PDT a_DT i_FW will_MD cause_VB agent_NN i_FW to_TO have_VB negative_JJ utility_NN ,_, since_IN vi_LS <_JJR arg_CD minvi0_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NN arg_NN minvi0_NN ei_NN -LRB-_-LRB- -LRB-_-LRB- -LRB-_-LRB- ri_NN ,_, di_FW ,_, li_NN ,_, vi_LS -RRB-_-RRB- ,_, i_LS -RRB-_-RRB- ,_, di_FW -RRB-_-RRB- li_NN holds_VBZ by_IN Lemmas_NNP #_# and_CC #_# ,_, respectively_RB ._.
4_LS ._.
#_# Proof_NNP of_IN Competitive_NNP Ratio_NNP The_NNP proof_NN of_IN the_DT competitive_JJ ratio_NN ,_, which_WDT makes_VBZ use_NN of_IN techniques_NNS adapted_VBN from_IN those_DT used_VBN in_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- ,_, is_VBZ also_RB broken_VBN into_IN lemmas_NNS ._.
Having_VBG shown_VBN IC_NN ,_, we_PRP can_MD assume_VB truthful_JJ declaration_NN -LRB-_-LRB- =_JJ -RRB-_-RRB- ._.
Since_IN we_PRP have_VBP also_RB shown_VBN IR_NNP ,_, in_IN order_NN to_TO prove_VB the_DT competitive_JJ ratio_NN it_PRP remains_VBZ to_TO bound_VBN the_DT loss_NN of_IN social_JJ welfare_NN against_IN offline_NN ._.
Denote_VB by_IN -LRB-_-LRB- #_# ,_, #_# ,_, ..._: ,_, F_NN -RRB-_-RRB- the_DT sequence_NN of_IN jobs_NNS completed_VBN by_IN 1_CD ._.
Divide_VB time_NN into_IN intervals_NNS If_IN =_JJ -LRB-_-LRB- topen_JJ f_FW ,_, tclose_FW f_FW -RSB-_-RRB- ,_, one_CD for_IN each_DT job_NN f_FW in_IN this_DT sequence_NN ._.
Set_VB tclose_FW f_FW to_TO be_VB the_DT time_NN at_IN which_WDT job_NN f_FW is_VBZ completed_VBN ,_, and_CC set_VBN topen_NN f_FW =_JJ tclose_NN f1_NN for_IN f_FW #_# ,_, and_CC topen_NN 1_CD =_JJ #_# for_IN f_FW =_JJ #_# ._.
Also_RB ,_, let_VB tbegin_FW f_FW be_VB the_DT first_JJ time_NN that_IN the_DT processor_NN is_VBZ not_RB idle_JJ in_IN interval_JJ If_IN ._.
Lemma_NNP #_# ._.
For_IN any_DT interval_NN If_IN ,_, the_DT following_VBG inequality_NN holds_VBZ :_: tclose_NN f_FW tbegin_FW f_FW -LRB-_-LRB- #_# +_CC #_# k_NN -RRB-_-RRB- vf_NN Proof_NNP ._.
Interval_NNP If_IN begins_VBZ with_IN a_DT -LRB-_-LRB- possibly_RB zero_CD length_NN -RRB-_-RRB- period_NN of_IN time_NN in_IN which_WDT the_DT processor_NN is_VBZ idle_JJ because_IN there_EX is_VBZ no_DT available_JJ job_NN ._.
Then_RB ,_, it_PRP continuously_RB executes_VBZ a_DT sequence_NN of_IN jobs_NNS -LRB-_-LRB- #_# ,_, #_# ,_, ..._: ,_, c_NN -RRB-_-RRB- ,_, where_WRB each_DT job_NN i_FW in_IN this_DT sequence_NN is_VBZ preempted_VBN by_IN job_NN i_FW +_CC #_# ,_, except_IN for_IN job_NN c_NN ,_, which_WDT is_VBZ completed_VBN -LRB-_-LRB- thus_RB ,_, job_NN c_NN in_IN this_DT sequence_NN is_VBZ the_DT same_JJ as_IN job_NN f_FW is_VBZ the_DT global_JJ sequence_NN of_IN completed_VBN jobs_NNS -RRB-_-RRB- ._.
Let_VB ts_NNS i_FW be_VB the_DT time_NN that_WDT job_NN i_FW begins_VBZ execution_NN ._.
Note_VB that_DT ts_NNS 1_CD =_JJ tbegin_NN f_FW ._.
Over_IN the_DT range_NN -LSB-_-LRB- tbegin_NN f_FW ,_, tclose_FW f_FW -RSB-_-RRB- ,_, the_DT priority_NN -LRB-_-LRB- vi_LS +_CC kei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- -RRB-_-RRB- of_IN the_DT active_JJ job_NN is_VBZ monotonically_RB increasing_VBG with_IN time_NN ,_, because_IN this_DT function_NN linearly_RB increases_VBZ while_IN a_DT job_NN is_VBZ active_JJ ,_, and_CC can_MD only_RB increase_VB at_IN a_DT point_NN in_IN time_NN when_WRB preemption_NN occurs_VBZ ._.
Thus_RB ,_, each_DT job_NN i_FW >_JJR #_# in_IN this_DT sequence_NN begins_VBZ execution_NN at_IN its_PRP$ release_NN time_NN -LRB-_-LRB- that_WDT is_VBZ ,_, ts_NNS i_FW =_JJ ri_NN -RRB-_-RRB- ,_, because_IN its_PRP$ priority_NN does_VBZ not_RB increase_VB while_IN it_PRP is_VBZ not_RB active_JJ ._.
We_PRP now_RB show_VBP that_IN the_DT value_NN of_IN the_DT completed_VBN job_NN c_NN exceeds_VBZ the_DT product_NN of_IN k_NN and_CC the_DT time_NN spent_VBN in_IN the_DT interval_NN on_IN jobs_NNS #_# through_IN c1_NN ,_, or_CC ,_, more_RBR formally_RB ,_, that_IN the_DT following_VBG condition_NN holds_VBZ :_: vc_NN k_NN c1_NN h_NN =_JJ #_# -LRB-_-LRB- eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN +_CC #_# -RRB-_-RRB- eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN -RRB-_-RRB- -RRB-_-RRB- ._.
To_TO show_VB this_DT ,_, we_PRP will_MD prove_VB by_IN induction_NN that_IN the_DT stronger_JJR condition_NN vi_LS k_NN i1_NN h_NN =_JJ #_# eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN +_CC #_# -RRB-_-RRB- holds_VBZ for_IN all_DT jobs_NNS i_FW in_IN the_DT sequence_NN ._.
Base_NNP Case_NNP :_: For_IN i_FW =_JJ #_# ,_, v1_NN k_NN #_# h_NN =_JJ #_# eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN +_CC #_# -RRB-_-RRB- =_JJ #_# ,_, since_IN the_DT sum_NN is_VBZ over_IN zero_CD elements_NNS ._.
Inductive_JJ Step_NN :_: For_IN an_DT arbitrary_JJ #_# i_FW <_JJR c_NN ,_, we_PRP assume_VBP that_IN vi_LS k_NN i1_NN h_NN =_JJ #_# eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN +_CC #_# -RRB-_-RRB- holds_VBZ ._.
At_IN time_NN ts_NNS i_FW +_CC #_# ,_, we_PRP know_VBP that_IN vi_LS +_CC #_# vi_LS +_CC k_NN ei_NN -LRB-_-LRB- ,_, ts_NNS i_FW +_CC #_# -RRB-_-RRB- holds_VBZ ,_, because_IN ts_NNS i_FW +_CC #_# =_JJ ri_NN +_CC #_# ._.
These_DT two_CD inequalities_NNS together_RB imply_VBP that_IN vi_LS +_CC #_# k_NN i_FW h_NN =_JJ #_# eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN +_CC #_# -RRB-_-RRB- ,_, completing_VBG the_DT inductive_JJ step_NN ._.
We_PRP also_RB know_VBP that_IN tclose_NN f_FW ts_FW c_NN lc_NN vc_NN must_MD hold_VB ,_, by_IN the_DT simplifying_VBG normalization_NN of_IN min_NN =_JJ #_# and_CC the_DT fact_NN that_IN job_NN c_NN ''_'' s_NNS execution_NN time_NN can_MD not_RB exceed_VB its_PRP$ length_NN ._.
We_PRP can_MD thus_RB bound_VBD the_DT total_JJ execution_NN time_NN of_IN If_IN by_IN :_: tclose_NN f_FW tbegin_FW f_FW =_JJ -LRB-_-LRB- tclose_FW f_FW ts_FW c_NN -RRB-_-RRB- +_CC c1_NN h_NN =_JJ #_# -LRB-_-LRB- eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN +_CC #_# -RRB-_-RRB- eh_UH -LRB-_-LRB- ,_, ts_NNS h_NN -RRB-_-RRB- -RRB-_-RRB- -LRB-_-LRB- #_# +_CC #_# k_NN -RRB-_-RRB- vf_NN ._.
We_PRP now_RB consider_VBP the_DT possible_JJ execution_NN of_IN uncompleted_JJ jobs_NNS by_IN offline_NN ._.
Associate_JJ each_DT job_NN i_FW that_WDT is_VBZ not_RB completed_VBN by_IN #_# with_IN the_DT interval_NN during_IN which_WDT it_PRP was_VBD abandoned_VBN ._.
All_DT jobs_NNS are_VBP now_RB associated_VBN with_IN an_DT interval_NN ,_, since_IN there_EX are_VBP no_DT gaps_NNS between_IN the_DT intervals_NNS ,_, and_CC since_IN no_DT job_NN i_FW can_MD be_VB abandoned_VBN after_IN the_DT close_NN of_IN the_DT last_JJ interval_NN at_IN tclose_NN F_NN ._.
Because_IN the_DT processor_NN is_VBZ idle_JJ after_IN tclose_NN F_NN ,_, any_DT such_JJ job_NN i_FW would_MD become_VB active_JJ at_IN some_DT time_NN t_NN tclose_NN F_NN ,_, which_WDT would_MD lead_VB to_TO the_DT completion_NN of_IN some_DT job_NN ,_, creating_VBG a_DT new_JJ interval_NN and_CC contradicting_VBG the_DT fact_NN that_IN IF_IN is_VBZ the_DT last_JJ one_CD ._.
67_CD The_DT following_VBG lemma_NN is_VBZ equivalent_JJ to_TO Lemma_NNP #_# ._.
#_# of_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- ,_, but_CC the_DT proof_NN is_VBZ different_JJ for_IN our_PRP$ mechanism_NN ._.
Lemma_NNP #_# ._.
For_IN any_DT interval_NN If_IN and_CC any_DT job_NN i_FW abandoned_VBN in_IN If_IN ,_, the_DT following_VBG inequality_NN holds_VBZ :_: vi_LS -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ._.
Proof_NN ._.
Assume_VB by_IN contradiction_NN that_IN there_EX exists_VBZ a_DT job_NN i_FW abandoned_VBN in_IN If_IN such_JJ that_IN vi_LS >_JJR -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ._.
At_IN tclose_NN f_FW ,_, the_DT priority_NN of_IN job_NN f_FW is_VBZ vf_NN +_CC k_NN lf_NN <_JJR -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ._.
Because_IN the_DT priority_NN of_IN the_DT active_JJ job_NN monotonically_RB increases_VBZ over_IN the_DT range_NN -LSB-_-LRB- tbegin_NN f_FW ,_, tclose_FW f_FW -RSB-_-RRB- ,_, job_NN i_FW would_MD have_VB a_DT higher_JJR priority_NN than_IN the_DT active_JJ job_NN -LRB-_-LRB- and_CC thus_RB begin_VB execution_NN -RRB-_-RRB- at_IN some_DT time_NN t_NN -LSB-_-LRB- tbegin_NN f_FW ,_, tclose_FW f_FW -RSB-_-RRB- ._.
Again_RB applying_VBG monotonicity_NN ,_, this_DT would_MD imply_VB that_IN the_DT priority_NN of_IN the_DT active_JJ job_NN at_IN tclose_NN f_FW exceeds_VBZ -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ,_, contradicting_VBG the_DT fact_NN that_IN it_PRP is_VBZ -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ._.
As_IN in_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- ,_, for_IN each_DT interval_NN If_IN ,_, we_PRP give_VBP offline_VB the_DT following_VBG gift_NN :_: k_NN times_NNS the_DT amount_NN of_IN time_NN in_IN the_DT range_NN -LSB-_-LRB- tbegin_NN f_FW ,_, tclose_FW f_FW -RSB-_-RRB- that_IN it_PRP does_VBZ not_RB schedule_VB a_DT job_NN ._.
Additionally_RB ,_, we_PRP give_VBP the_DT adversary_NN vf_NN ,_, since_IN the_DT adversary_NN may_MD be_VB able_JJ to_TO complete_VB this_DT job_NN at_IN some_DT future_JJ time_NN ,_, due_JJ to_TO the_DT fact_NN that_IN #_# ignores_VBZ deadlines_NNS ._.
The_DT following_VBG lemma_NN is_VBZ Lemma_NNP 5_CD ._.
##_NN in_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- ,_, and_CC its_PRP$ proof_NN now_RB applies_VBZ directly_RB ._.
Lemma_NNP #_# ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- With_IN the_DT above_JJ gifts_NNS the_DT total_JJ net_JJ gain_NN obtained_VBN by_IN the_DT clairvoyant_JJ algorithm_NN from_IN scheduling_VBG the_DT jobs_NNS abandoned_VBN during_IN If_IN is_VBZ not_RB greater_JJR than_IN -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ._.
The_DT intuition_NN behind_IN this_DT lemma_NN is_VBZ that_IN the_DT best_JJS that_IN the_DT adversary_NN can_MD do_VB is_VBZ to_TO take_VB almost_RB all_DT of_IN the_DT gift_NN of_IN k_NN -LRB-_-LRB- tclose_NN f_FW tbegin_FW f_LS -RRB-_-RRB- -LRB-_-LRB- intuitively_RB ,_, this_DT is_VBZ equivalent_JJ to_TO executing_VBG jobs_NNS with_IN the_DT maximum_NN possible_JJ value_NN density_NN over_IN the_DT time_NN that_WDT #_# is_VBZ active_JJ -RRB-_-RRB- ,_, and_CC then_RB begin_VB execution_NN of_IN a_DT job_NN abandoned_VBN by_IN #_# right_RB before_IN tclose_NN f_FW ._.
By_IN Lemma_NN #_# ,_, the_DT value_NN of_IN this_DT job_NN is_VBZ bounded_VBN by_IN -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ._.
We_PRP can_MD now_RB combine_VB the_DT results_NNS of_IN these_DT lemmas_NNS to_TO prove_VB the_DT competitive_JJ ratio_NN ._.
Theorem_NNP ##_NNP ._.
Mechanism_NN #_# is_VBZ -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# -_: competitive_JJ ._.
Proof_NN ._.
Using_VBG the_DT fact_NN that_IN the_DT way_NN in_IN which_WDT jobs_NNS are_VBP associated_VBN with_IN the_DT intervals_NNS partitions_NNS the_DT entire_JJ set_NN of_IN jobs_NNS ,_, we_PRP can_MD show_VB the_DT competitive_JJ ratio_NN by_IN showing_VBG that_IN #_# is_VBZ -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# -_: competitive_JJ for_IN each_DT interval_NN in_IN the_DT sequence_NN -LRB-_-LRB- #_# ,_, ..._: ,_, F_NN -RRB-_-RRB- ._.
Over_IN an_DT arbitrary_JJ interval_NN If_IN ,_, the_DT oine_NN algorithm_NN can_MD achieve_VB at_IN most_JJS -LRB-_-LRB- tclose_FW f_FW tbegin_FW f_LS -RRB-_-RRB- k_NN +_CC vf_NN +_CC -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN ,_, from_IN the_DT two_CD gifts_NNS and_CC the_DT net_JJ gain_NN bounded_VBN by_IN Lemma_NNP 9_CD ._.
Applying_VBG Lemma_NNP #_# ,_, this_DT quantity_NN is_VBZ then_RB bounded_VBN from_IN above_JJ by_IN -LRB-_-LRB- #_# +_CC #_# k_NN -RRB-_-RRB- vf_NN k_NN +_CC vf_NN +_CC -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- vf_NN =_JJ -LRB-_-LRB- -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# -RRB-_-RRB- vf_NN ._.
Since_IN #_# achieves_VBZ vf_NN ,_, the_DT competitive_JJ ratio_NN holds_VBZ ._.
4_LS ._.
#_# Special_JJ Case_NN :_: Unalterable_JJ length_NN and_CC k_NN =_JJ #_# While_IN so_RB far_RB we_PRP have_VBP allowed_VBN each_DT agent_NN to_TO lie_VB about_IN all_DT four_CD characteristics_NNS of_IN its_PRP$ job_NN ,_, lying_VBG about_IN the_DT length_NN of_IN the_DT job_NN is_VBZ not_RB possible_JJ in_IN some_DT settings_NNS ._.
For_IN example_NN ,_, a_DT user_NN may_MD not_RB know_VB how_WRB to_TO alter_VB a_DT computational_JJ problem_NN in_IN a_DT way_NN that_IN both_CC lengthens_VBZ the_DT job_NN and_CC allows_VBZ the_DT solution_NN of_IN the_DT original_JJ problem_NN to_TO be_VB extracted_VBN from_IN the_DT solution_NN to_TO the_DT altered_JJ problem_NN ._.
Another_DT restriction_NN that_WDT is_VBZ natural_JJ in_IN some_DT settings_NNS is_VBZ uniform_JJ value_NN densities_NNS -LRB-_-LRB- k_NN =_JJ #_# -RRB-_-RRB- ,_, which_WDT was_VBD the_DT case_NN considered_VBN by_IN -LSB-_-LRB- #_# -RSB-_-RRB- ._.
If_IN the_DT setting_NN satisfies_VBZ these_DT two_CD conditions_NNS ,_, then_RB ,_, by_IN using_VBG Mechanism_NN #_# ,_, we_PRP can_MD achieve_VB a_DT competitive_JJ ratio_NN of_IN #_# -LRB-_-LRB- which_WDT is_VBZ the_DT same_JJ competitive_JJ ratio_NN as_IN #_# for_IN the_DT case_NN of_IN k_NN =_JJ #_# -RRB-_-RRB- without_IN knowledge_NN of_IN min_NN and_CC without_IN the_DT use_NN of_IN payments_NNS ._.
The_DT latter_JJ property_NN may_MD be_VB necessary_JJ in_IN settings_NNS that_WDT are_VBP more_RBR local_JJ than_IN grid_NN computing_NN -LRB-_-LRB- e_LS ._.
g_NN ._.
,_, within_IN a_DT department_NN -RRB-_-RRB- but_CC in_IN which_WDT the_DT users_NNS are_VBP still_RB self-interested_JJ ._.
#_# Mechanism_NN #_# #_# Execute_VB S_NN -LRB-_-LRB- ,_, -RRB-_-RRB- according_VBG to_TO Algorithm_NNP #_# for_IN all_DT i_FW do_VBP pi_NN -LRB-_-LRB- -RRB-_-RRB- #_# Algorithm_NNP #_# for_IN all_DT t_NN do_VBP Avail_NNP -LCB-_-LRB- i_FW |_FW -LRB-_-LRB- t_NN ri_NN -RRB-_-RRB- -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- <_JJR li_NNS -RRB-_-RRB- -LRB-_-LRB- ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- +_CC dit_FW li_FW -RRB-_-RRB- -RCB-_-RRB- if_IN Avail_NN =_JJ then_RB S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- arg_NN maxiAvail_NN -LRB-_-LRB- li_NN +_CC ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- -RRB-_-RRB- -LCB-_-LRB- Break_VB ties_NNS in_IN favor_NN of_IN lower_JJR ri_NNS -RCB-_-RRB- else_RB S_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- #_# Theorem_NNP ##_CD ._.
When_WRB k_NN =_JJ #_# ,_, and_CC each_DT agent_NN i_FW can_MD not_RB falsely_RB declare_VB li_NN ,_, Mechanism_NN #_# satisfies_NNS individual_JJ rationality_NN and_CC incentive_NN compatibility_NN ._.
Theorem_NNP ##_NNP ._.
When_WRB k_NN =_JJ #_# ,_, and_CC each_DT agent_NN i_FW can_MD not_RB falsely_RB declare_VB li_NN ,_, Mechanism_NN #_# is_VBZ 5-competitive_JJ ._.
Since_IN this_DT mechanism_NN is_VBZ essentially_RB a_DT simplification_NN of_IN #_# ,_, we_PRP omit_VBP proofs_NNS of_IN these_DT theorems_NNS ._.
Basically_RB ,_, the_DT fact_NN that_IN k_NN =_JJ #_# and_CC li_NN =_JJ li_NNS both_CC hold_VBP allows_VBZ #_# to_TO substitute_VB the_DT priority_NN -LRB-_-LRB- li_NN +_CC ei_NN -LRB-_-LRB- ,_, t_NN -RRB-_-RRB- -RRB-_-RRB- for_IN the_DT priority_NN used_VBN in_IN #_# ;_: and_CC ,_, since_IN vi_LS is_VBZ ignored_VBN ,_, payments_NNS are_VBP no_RB longer_RB needed_VBN to_TO ensure_VB incentive_NN compatibility_NN ._.
5_CD ._.
COMPETITIVE_NNP LOWER_NNP BOUND_NNP We_PRP now_RB show_VBP that_IN the_DT competitive_JJ ratio_NN of_IN -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC 1_CD achieved_VBN by_IN #_# is_VBZ a_DT lower_JJR bound_VBN for_IN deterministic_JJ online_JJ mechanisms_NNS ._.
To_TO do_VB so_RB ,_, we_PRP will_MD appeal_VB to_TO third_JJ requirement_NN on_IN a_DT mechanism_NN ,_, non-negative_JJ payments_NNS -LRB-_-LRB- NNP_NN -RRB-_-RRB- ,_, which_WDT requires_VBZ that_IN the_DT center_NN never_RB pays_VBZ an_DT agent_NN -LRB-_-LRB- formally_RB ,_, i_FW ,_, ,_, pi_NN -LRB-_-LRB- i_LS -RRB-_-RRB- #_# -RRB-_-RRB- ._.
Unlike_IN IC_NN and_CC IR_NN ,_, this_DT requirement_NN is_VBZ not_RB standard_JJ in_IN mechanism_NN design_NN ._.
We_PRP note_VBP ,_, however_RB ,_, that_IN both_CC 1_CD and_CC #_# satisfy_VB it_PRP trivially_RB ,_, and_CC that_IN ,_, in_IN the_DT following_VBG proof_NN ,_, zero_CD only_RB serves_VBZ as_IN a_DT baseline_NN utility_NN for_IN an_DT agent_NN ,_, and_CC could_MD be_VB replaced_VBN by_IN any_DT non-positive_JJ function_NN of_IN i_FW ._.
The_DT proof_NN of_IN the_DT lower_JJR bound_VBN uses_VBZ an_DT adversary_NN argument_NN similar_JJ to_TO that_DT used_VBN in_IN -LSB-_-LRB- #_# -RSB-_-RRB- to_TO show_VB a_DT lower_JJR bound_VBN of_IN -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# in_IN the_DT non-strategic_JJ setting_NN ,_, with_IN the_DT main_JJ novelty_NN lying_VBG in_IN the_DT perturbation_NN of_IN the_DT job_NN sequence_NN and_CC the_DT related_JJ incentive_NN compatibility_NN arguments_NNS ._.
We_PRP first_RB present_VB a_DT lemma_NN relating_VBG to_TO the_DT recurrence_NN used_VBN for_IN this_DT argument_NN ,_, with_IN the_DT proof_NN omitted_VBN due_JJ to_TO space_NN constraints_NNS ._.
Lemma_NNP ##_NNP ._.
For_IN any_DT k_NN #_# ,_, for_IN the_DT recurrence_NN defined_VBN by_IN li_NN +_CC #_# =_SYM li_FW k_NN i_FW h_NN =_JJ #_# lh_NN and_CC l1_NN =_JJ #_# ,_, where_WRB -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# #_# <_JJR <_JJR -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# ,_, there_EX exists_VBZ an_DT integer_NN m_NN #_# such_PDT that_IN lm_NN +_CC k_NN m1_NN h_NN =_JJ #_# lh_VBP lm_NN >_JJR ._.
7_CD While_IN payments_NNS are_VBP not_RB required_VBN in_IN this_DT setting_NN ,_, #_# can_MD be_VB changed_VBN to_TO collect_VB a_DT payments_NNS without_IN affecting_VBG incentive_NN compatibility_NN by_IN charging_VBG some_DT fixed_VBN fraction_NN of_IN li_NN for_IN each_DT job_NN i_FW that_WDT is_VBZ completed_VBN ._.
68_CD Theorem_NNP ##_CD ._.
There_EX does_VBZ not_RB exist_VB a_DT deterministic_JJ online_JJ mechanism_NN that_WDT satisfies_VBZ NNP_NN and_CC that_IN achieves_VBZ a_DT competitive_JJ ratio_NN less_JJR than_IN -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# ._.
Proof_NN ._.
Assume_VB by_IN contradiction_NN that_IN there_EX exists_VBZ a_DT deterministic_JJ online_JJ mechanism_NN that_WDT satisfies_VBZ NNP_NN and_CC that_IN achieves_VBZ a_DT competitive_JJ ratio_NN of_IN c_NN =_JJ -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# for_IN some_DT >_JJR #_# -LRB-_-LRB- and_CC ,_, by_IN implication_NN ,_, satisfies_VBZ IC_NN and_CC IR_NN as_RB well_RB -RRB-_-RRB- ._.
Since_IN a_DT competitive_JJ ratio_NN of_IN c_NN implies_VBZ a_DT competitive_JJ ratio_NN of_IN c_NN +_CC x_NN ,_, for_IN any_DT x_NN >_JJR #_# ,_, we_PRP assume_VBP without_IN loss_NN of_IN generality_NN that_WDT <_JJR #_# ._.
First_RB ,_, we_PRP will_MD construct_VB a_DT profile_NN of_IN agent_NN types_NNS using_VBG an_DT adversary_NN argument_NN ._.
After_IN possibly_RB slightly_RB perturbing_VBG to_TO assure_VB that_IN a_DT strictness_NN property_NN is_VBZ satisfied_JJ ,_, we_PRP will_MD then_RB use_VB a_DT more_RBR significant_JJ perturbation_NN of_IN to_TO reach_VB a_DT contradiction_NN ._.
We_PRP now_RB construct_VBP the_DT original_JJ profile_NN ._.
Pick_VB an_DT such_JJ that_IN #_# <_JJR <_JJR ,_, and_CC define_VB =_JJ ck_NN +_CC 3k_NN ._.
The_DT adversary_NN uses_VBZ two_CD sequences_NNS of_IN jobs_NNS :_: minor_JJ and_CC major_JJ ._.
Minor_NNP jobs_NNS i_FW are_VBP characterized_VBN by_IN li_NN =_JJ ,_, vi_LS =_JJ k_NN ,_, and_CC zero_CD laxity_NN ._.
The_DT first_JJ minor_JJ job_NN is_VBZ released_VBN at_IN time_NN #_# ,_, and_CC ri_NN =_JJ di1_NN for_IN all_DT i_FW >_JJR #_# ._.
The_DT sequence_NN stops_VBZ whenever_WRB completes_VBZ any_DT job_NN ._.
Major_JJ jobs_NNS also_RB have_VBP zero_CD laxity_NN ,_, but_CC they_PRP have_VBP the_DT smallest_JJS possible_JJ value_NN ratio_NN -LRB-_-LRB- that_WDT is_VBZ ,_, vi_LS =_SYM li_FW -RRB-_-RRB- ._.
The_DT lengths_NNS of_IN the_DT major_JJ jobs_NNS that_WDT may_MD be_VB released_VBN ,_, starting_VBG with_IN i_FW =_JJ #_# ,_, are_VBP determined_VBN by_IN the_DT following_VBG recurrence_NN relation_NN ._.
li_NN +_CC #_# =_JJ -LRB-_-LRB- c_NN #_# +_CC -RRB-_-RRB- li_NN k_NN i_FW h_NN =_JJ #_# lh_SYM l1_NN =_JJ #_# The_DT bounds_NNS on_IN imply_VBP that_IN -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# #_# <_JJR c_NN #_# +_CC <_JJR -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# ,_, which_WDT allows_VBZ us_PRP to_TO apply_VB Lemma_NNP ##_NNP ._.
Let_VB m_NN be_VB the_DT smallest_JJS positive_JJ number_NN such_JJ that_IN lm_NN +_CC k_NN m1_NN h_NN =_JJ #_# lh_VBP lm_NN >_JJR c1_NN +_CC ._.
The_DT first_JJ major_JJ job_NN has_VBZ a_DT release_NN time_NN of_IN #_# ,_, and_CC each_DT major_JJ job_NN i_FW >_JJR #_# has_VBZ a_DT release_NN time_NN of_IN ri_NN =_JJ di1_NN ,_, just_RB before_IN the_DT deadline_NN of_IN the_DT previous_JJ job_NN ._.
The_DT adversary_NN releases_VBZ major_JJ job_NN i_FW m_NN if_IN and_CC only_RB if_IN each_DT major_JJ job_NN j_NN <_JJR i_FW was_VBD executed_VBN continuously_RB over_IN the_DT range_NN -LSB-_-LRB- ri_NN ,_, ri_NN +_CC #_# -RSB-_-RRB- ._.
No_DT major_JJ job_NN is_VBZ released_VBN after_IN job_NN m_NN ._.
In_IN order_NN to_TO achieve_VB the_DT desired_VBN competitive_JJ ratio_NN ,_, must_MD complete_VB some_DT major_JJ job_NN f_FW ,_, because_IN offline_NN can_MD always_RB at_IN least_JJS complete_JJ major_JJ job_NN #_# -LRB-_-LRB- for_IN a_DT value_NN of_IN #_# -RRB-_-RRB- ,_, and_CC can_MD complete_VB at_IN most_JJS one_CD minor_JJ job_NN -LRB-_-LRB- for_IN a_DT value_NN of_IN c_NN +_CC #_# <_JJR #_# c_LS -RRB-_-RRB- ._.
Also_RB ,_, in_IN order_NN for_IN this_DT job_NN f_FW to_TO be_VB released_VBN ,_, the_DT processor_NN time_NN preceding_VBG rf_NN can_MD only_RB be_VB spent_VBN executing_VBG major_JJ jobs_NNS that_WDT are_VBP later_RB abandoned_VBN ._.
If_IN f_FW <_JJR m_NN ,_, then_RB major_JJ job_NN f_FW +_CC #_# will_MD be_VB released_VBN and_CC it_PRP will_MD be_VB the_DT final_JJ major_JJ job_NN ._.
can_MD not_RB complete_VB job_NN f_SYM +_CC #_# ,_, because_IN rf_NN +_CC lf_NN =_JJ df_NN >_JJR rf_NN +_CC #_# ._.
Therefore_RB ,_, consists_VBZ of_IN major_JJ jobs_NNS #_# through_IN f_FW +_CC #_# -LRB-_-LRB- or_CC ,_, f_FW ,_, if_IN f_FW =_JJ m_NN -RRB-_-RRB- ,_, plus_CC minor_JJ jobs_NNS from_IN time_NN #_# through_IN time_NN df_NN ._.
We_PRP now_RB possibly_RB perturb_VB slightly_RB ._.
By_IN IR_NN ,_, we_PRP know_VBP that_IN vf_NN pf_NN -LRB-_-LRB- -RRB-_-RRB- ._.
Since_IN we_PRP will_MD later_RB need_VB this_DT inequality_NN to_TO be_VB strict_JJ ,_, if_IN vf_NN =_JJ pf_NN -LRB-_-LRB- -RRB-_-RRB- ,_, then_RB change_VB f_SYM to_TO f_LS ,_, where_WRB rf_NN =_JJ rf_NN ,_, but_CC vf_NN ,_, lf_NN ,_, and_CC df_NN are_VBP all_DT incremented_VBN by_IN over_IN their_PRP$ respective_JJ values_NNS in_IN f_FW ._.
By_IN IC_NN ,_, job_NN f_FW must_MD still_RB be_VB completed_VBN by_IN for_IN the_DT profile_NN -LRB-_-LRB- f_FW ,_, f_LS -RRB-_-RRB- ._.
If_IN not_RB ,_, then_RB by_IN IR_NN and_CC NNP_NN we_PRP know_VBP that_IN pf_NN -LRB-_-LRB- f_FW ,_, f_LS -RRB-_-RRB- =_JJ #_# ,_, and_CC thus_RB that_IN uf_NN -LRB-_-LRB- g_NN -LRB-_-LRB- f_FW ,_, f_LS -RRB-_-RRB- ,_, f_LS -RRB-_-RRB- =_JJ #_# ._.
However_RB ,_, agent_NN f_FW could_MD then_RB increase_VB its_PRP$ utility_NN by_IN falsely_RB declaring_VBG the_DT original_JJ type_NN of_IN f_FW ,_, receiving_VBG a_DT utility_NN of_IN :_: uf_NN -LRB-_-LRB- g_NN -LRB-_-LRB- f_FW ,_, f_LS -RRB-_-RRB- ,_, f_LS -RRB-_-RRB- =_JJ vf_NN pf_NN -LRB-_-LRB- -RRB-_-RRB- =_JJ >_JJR #_# ,_, violating_VBG IC_NN ._.
Furthermore_RB ,_, agent_NN f_FW must_MD be_VB charged_VBN the_DT same_JJ amount_NN -LRB-_-LRB- that_WDT is_VBZ ,_, pf_NN -LRB-_-LRB- f_FW ,_, f_LS -RRB-_-RRB- =_JJ pf_NN -LRB-_-LRB- -RRB-_-RRB- -RRB-_-RRB- ,_, due_JJ to_TO a_DT similar_JJ incentive_NN compatibility_NN argument_NN ._.
Thus_RB ,_, for_IN the_DT remainder_NN of_IN the_DT proof_NN ,_, assume_VB that_DT vf_NN >_JJR pf_NN -LRB-_-LRB- -RRB-_-RRB- ._.
We_PRP now_RB use_VBP a_DT more_RBR substantial_JJ perturbation_NN of_IN to_TO complete_VB the_DT proof_NN ._.
If_IN f_FW <_JJR m_NN ,_, then_RB define_VB f_SYM to_TO be_VB identical_JJ to_TO f_LS ,_, except_IN that_DT df_NN =_JJ df_NN +_CC #_# +_CC lf_NN ,_, allowing_VBG job_NN f_FW to_TO be_VB completely_RB executed_VBN after_IN job_NN f_FW +_CC #_# is_VBZ completed_VBN ._.
If_IN f_FW =_JJ m_NN ,_, then_RB instead_RB set_VBN df_NN =_JJ df_NN +_CC lf_NN ._.
IC_NN requires_VBZ that_IN for_IN the_DT profile_NN -LRB-_-LRB- f_FW ,_, f_LS -RRB-_-RRB- ,_, still_RB executes_VBZ job_NN f_FW continuously_RB over_IN the_DT range_NN -LSB-_-LRB- rf_NN ,_, rf_NN +_CC lf_NN -RSB-_-RRB- ,_, thus_RB preventing_VBG job_NN f_FW +_CC #_# from_IN being_VBG completed_VBN ._.
Assume_VB by_IN contradiction_NN that_IN this_DT were_VBD not_RB true_JJ ._.
Then_RB ,_, at_IN the_DT original_JJ deadline_NN of_IN df_NN ,_, job_NN f_FW is_VBZ not_RB completed_VBN ._.
Consider_VB the_DT possible_JJ profile_NN -LRB-_-LRB- f_FW ,_, f_FW ,_, x_NN -RRB-_-RRB- ,_, which_WDT differs_VBZ from_IN the_DT new_JJ profile_NN only_RB in_IN the_DT addition_NN of_IN a_DT job_NN x_NN which_WDT has_VBZ zero_CD laxity_NN ,_, rx_NN =_JJ df_NN ,_, and_CC vx_NN =_JJ lx_NN =_JJ max_NN -LRB-_-LRB- df_NN df_NN ,_, -LRB-_-LRB- c_NN +_CC #_# -RRB-_-RRB- -LRB-_-LRB- lf_NN +_CC lf_NN +_CC #_# -RRB-_-RRB- -RRB-_-RRB- ._.
Because_IN this_DT new_JJ profile_NN is_VBZ indistinguishable_JJ from_IN -LRB-_-LRB- f_LS ,_, f_LS -RRB-_-RRB- to_TO before_IN time_NN df_NN ,_, it_PRP must_MD schedule_VB jobs_NNS in_IN the_DT same_JJ way_NN until_IN df_NN ._.
Then_RB ,_, in_IN order_NN to_TO achieve_VB the_DT desired_VBN competitive_JJ ratio_NN ,_, it_PRP must_MD execute_VB job_NN x_CC continuously_RB until_IN its_PRP$ deadline_NN ,_, which_WDT is_VBZ by_IN construction_NN at_IN least_JJS as_IN late_JJ as_IN the_DT new_JJ deadline_NN df_NN of_IN job_NN f_FW ._.
Thus_RB ,_, job_NN f_FW will_MD not_RB be_VB completed_VBN ,_, and_CC ,_, by_IN IR_NNP and_CC NNP_NNP ,_, it_PRP must_MD be_VB the_DT case_NN that_WDT pf_NN -LRB-_-LRB- f_FW ,_, f_FW ,_, x_NN -RRB-_-RRB- =_JJ 0_CD and_CC uf_NN -LRB-_-LRB- g_NN -LRB-_-LRB- f_FW ,_, f_FW ,_, x_NN -RRB-_-RRB- ,_, f_LS -RRB-_-RRB- =_JJ #_# ._.
Using_VBG the_DT fact_NN that_WDT is_VBZ indistinguishable_JJ from_IN -LRB-_-LRB- f_FW ,_, f_FW ,_, x_NN -RRB-_-RRB- up_IN to_TO time_NN df_NN ,_, if_IN agent_NN f_FW falsely_RB declared_VBD his_PRP$ type_NN to_TO be_VB the_DT original_JJ f_LS ,_, then_RB its_PRP$ job_NN would_MD be_VB completed_VBN by_IN df_NN and_CC it_PRP would_MD be_VB charged_VBN pf_NN -LRB-_-LRB- -RRB-_-RRB- ._.
Its_PRP$ utility_NN would_MD then_RB increase_VB to_TO uf_NN -LRB-_-LRB- g_NN -LRB-_-LRB- f_FW ,_, f_FW ,_, x_NN -RRB-_-RRB- ,_, f_LS -RRB-_-RRB- =_JJ vf_NN pf_NN -LRB-_-LRB- -RRB-_-RRB- >_JJR #_# ,_, contradicting_VBG IC_NN ._.
While_IN ''_'' s_VBZ execution_NN must_MD be_VB identical_JJ for_IN both_CC -LRB-_-LRB- f_LS ,_, f_LS -RRB-_-RRB- and_CC -LRB-_-LRB- f_LS ,_, f_LS -RRB-_-RRB- ,_, offline_NN can_MD take_VB advantage_NN of_IN the_DT change_NN ._.
If_IN f_FW <_JJR m_NN ,_, then_RB achieves_VBZ a_DT value_NN of_IN at_IN most_JJS lf_NN +_CC -LRB-_-LRB- the_DT value_NN of_IN job_NN f_FW if_IN it_PRP were_VBD perturbed_VBN -RRB-_-RRB- ,_, while_IN offline_NN achieves_VBZ a_DT value_NN of_IN at_IN least_JJS k_NN -LRB-_-LRB- f_FW h_NN =_JJ #_# lh_VBP #_# -RRB-_-RRB- +_CC lf_NN +_CC #_# +_CC lf_NN by_IN executing_VBG minor_JJ jobs_NNS until_IN rf_NN +_CC #_# ,_, followed_VBN by_IN job_NN f_FW +_CC #_# and_CC then_RB job_NN f_FW -LRB-_-LRB- we_PRP subtract_VBP two_CD ''_'' s_VBZ instead_RB of_IN one_CD because_IN the_DT last_JJ minor_JJ job_NN before_IN rf_NN +_CC #_# may_MD have_VB to_TO be_VB abandoned_VBN -RRB-_-RRB- ._.
Substituting_VBG in_IN for_IN lf_NN +_CC #_# ,_, the_DT competitive_JJ ratio_NN is_VBZ then_RB at_IN least_JJS :_: k_NN -LRB-_-LRB- f_FW h_NN =_JJ #_# lh2_CD -RRB-_-RRB- +_CC lf_NN +_CC #_# +_CC lf_NN lf_NN +_CC =_JJ k_NN -LRB-_-LRB- f_FW h_NN =_JJ #_# lh_NN -RRB-_-RRB- 2k_NN +_CC -LRB-_-LRB- c1_NN +_CC -RRB-_-RRB- lf_NN k_NN -LRB-_-LRB- f_FW h_NN =_JJ #_# lh_NN -RRB-_-RRB- +_CC lf_NN lf_NN +_CC =_JJ clf_NN +_CC -LRB-_-LRB- lf_NN 2k_NN -RRB-_-RRB- lf_NN +_CC clf_NN +_CC -LRB-_-LRB- -LRB-_-LRB- ck_NN +_CC 3k_NN -RRB-_-RRB- 2k_NN -RRB-_-RRB- lf_NN +_CC >_JJR c_NN ._.
If_IN instead_RB f_FW =_JJ m_NN ,_, then_RB achieves_VBZ a_DT value_NN of_IN at_IN most_JJS lm_NN +_CC ,_, while_IN offline_NN achieves_VBZ a_DT value_NN of_IN at_IN least_JJS k_NN -LRB-_-LRB- m_NN h_NN =_JJ #_# lh_SYM 2_LS -RRB-_-RRB- +_CC lm_NN by_IN completing_VBG minor_JJ jobs_NNS until_IN dm_NN =_JJ rm_NN +_CC lm_NN ,_, and_CC then_RB completing_VBG job_NN m_NN ._.
The_DT competitive_JJ ratio_NN is_VBZ then_RB at_IN least_JJS :_: k_NN -LRB-_-LRB- m_NN h_NN =_JJ #_# lh2_CD -RRB-_-RRB- +_CC lm_NN lm_NN +_CC =_JJ k_NN -LRB-_-LRB- m1_NN h_NN =_JJ #_# lh_NN -RRB-_-RRB- 2k_NN +_CC klm_NN +_CC lm_NN lm_NN +_CC >_JJR -LRB-_-LRB- c1_NN +_CC -RRB-_-RRB- lm2k_NN +_CC klm_NN lm_NN +_CC =_JJ -LRB-_-LRB- c_NN +_CC k1_NN -RRB-_-RRB- lm_NN +_CC -LRB-_-LRB- lm2k_NN -RRB-_-RRB- lm_NN +_CC >_JJR c_NN ._.
6_CD ._.
RELATED_JJ WORK_VBP In_IN this_DT section_NN we_PRP describe_VBP related_JJ work_NN other_JJ than_IN the_DT two_CD papers_NNS -LRB-_-LRB- -LSB-_-LRB- #_# -RSB-_-RRB- and_CC -LSB-_-LRB- ##_CD -RSB-_-RRB- -RRB-_-RRB- on_IN which_WDT this_DT paper_NN is_VBZ based_VBN ._.
Recent_JJ work_NN related_VBN to_TO this_DT scheduling_NN domain_NN has_VBZ focused_VBN on_IN competitive_JJ analysis_NN in_IN which_WDT the_DT online_JJ algorithm_NN uses_VBZ a_DT faster_RBR processor_NN than_IN the_DT oine_NN algorithm_NN -LRB-_-LRB- see_VB ,_, e_LS ._.
g_NN ._.
,_, -LSB-_-LRB- ##_CD ,_, 14_CD -RSB-_-RRB- -RRB-_-RRB- ._.
Mechanism_NN design_NN was_VBD also_RB applied_VBN to_TO a_DT scheduling_NN problem_NN in_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- ._.
In_IN their_PRP$ model_NN ,_, the_DT center_NN owns_VBZ the_DT jobs_NNS in_IN an_DT oine_NN setting_NN ,_, and_CC it_PRP is_VBZ the_DT agents_NNS who_WP can_MD execute_VB them_PRP ._.
The_DT private_JJ information_NN of_IN an_DT agent_NN is_VBZ the_DT time_NN it_PRP will_MD require_VB to_TO execute_VB each_DT job_NN ._.
Several_JJ incentive_NN compatible_JJ mechanisms_NNS are_VBP presented_VBN that_DT are_VBP based_VBN on_IN approximation_NN algorithms_NNS for_IN the_DT computationally_RB infeasible_JJ optimization_NN problem_NN ._.
This_DT paper_NN also_RB launched_VBD the_DT area_NN of_IN algorithmic_JJ mechanism_NN design_NN ,_, in_IN which_WDT the_DT mechanism_NN must_MD sat69_VB isfy_JJ computational_JJ requirements_NNS in_IN addition_NN to_TO the_DT standard_JJ incentive_NN requirements_NNS ._.
A_DT growing_VBG sub-field_NN in_IN this_DT area_NN is_VBZ multicast_JJ cost-sharing_NN mechanism_NN design_NN ,_, in_IN which_WDT the_DT mechanism_NN must_MD efficiently_RB determine_VB ,_, for_IN each_DT agent_NN in_IN a_DT multicast_JJ tree_NN ,_, whether_IN the_DT agent_NN receives_VBZ the_DT transmission_NN and_CC the_DT price_NN it_PRP must_MD pay_VB ._.
For_IN a_DT survey_NN of_IN this_DT and_CC other_JJ topics_NNS in_IN distributed_VBN algorithmic_JJ mechanism_NN design_NN ,_, see_VB -LSB-_-LRB- #_# -RSB-_-RRB- ._.
Online_JJ execution_NN presents_VBZ a_DT different_JJ type_NN of_IN algorithmic_JJ challenge_NN ,_, and_CC several_JJ other_JJ papers_NNS study_NN online_JJ algorithms_NNS or_CC mechanisms_NNS in_IN economic_JJ settings_NNS ._.
For_IN example_NN ,_, -LSB-_-LRB- #_# -RSB-_-RRB- considers_VBZ an_DT online_JJ market_NN clearing_NN setting_NN ,_, in_IN which_WDT the_DT auctioneer_NN matches_VBZ buy_VB and_CC sells_VBZ bids_NNS -LRB-_-LRB- which_WDT are_VBP assumed_VBN to_TO be_VB exogenous_JJ -RRB-_-RRB- that_WDT arrive_VBP and_CC expire_VBP over_IN time_NN ._.
In_IN -LSB-_-LRB- #_# -RSB-_-RRB- ,_, a_DT general_JJ method_NN is_VBZ presented_VBN for_IN converting_VBG an_DT online_JJ algorithm_NN into_IN an_DT online_JJ mechanism_NN that_WDT is_VBZ incentive_NN compatible_JJ with_IN respect_NN to_TO values_NNS ._.
Truthful_JJ declaration_NN of_IN values_NNS is_VBZ also_RB considered_VBN in_IN -LSB-_-LRB- #_# -RSB-_-RRB- and_CC -LSB-_-LRB- ##_CD -RSB-_-RRB- ,_, which_WDT both_DT consider_VBP multi-unit_JJ online_JJ auctions_NNS ._.
The_DT main_JJ difference_NN between_IN the_DT two_CD is_VBZ that_IN the_DT former_JJ considers_VBZ the_DT case_NN of_IN a_DT digital_JJ good_JJ ,_, which_WDT thus_RB has_VBZ unlimited_JJ supply_NN ._.
It_PRP is_VBZ pointed_VBN out_RP in_IN -LSB-_-LRB- ##_NN -RSB-_-RRB- that_IN their_PRP$ results_NNS continue_VBP to_TO hold_VB when_WRB the_DT setting_NN is_VBZ extended_VBN so_IN that_IN bidders_NNS can_MD delay_VB their_PRP$ arrival_NN ._.
The_DT only_JJ other_JJ paper_NN we_PRP are_VBP aware_JJ of_IN that_DT addresses_NNS the_DT issue_NN of_IN incentive_NN compatibility_NN in_IN a_DT real-time_JJ system_NN is_VBZ -LSB-_-LRB- ##_CD -RSB-_-RRB- ,_, which_WDT considers_VBZ several_JJ variants_NNS of_IN a_DT model_NN in_IN which_WDT the_DT center_NN allocates_VBZ bandwidth_NN to_TO agents_NNS who_WP declare_VBP both_DT their_PRP$ value_NN and_CC their_PRP$ arrival_NN time_NN ._.
A_DT dominant_JJ strategy_NN IC_NN mechanism_NN is_VBZ presented_VBN for_IN the_DT variant_NN in_IN which_WDT every_DT point_NN in_IN time_NN is_VBZ essentially_RB independent_JJ ,_, while_IN a_DT Bayes-Nash_JJ IC_NN mechanism_NN is_VBZ presented_VBN for_IN the_DT variant_NN in_IN which_WDT the_DT center_NN ''_'' s_NNS current_JJ decision_NN affects_VBZ the_DT cost_NN of_IN future_JJ actions_NNS ._.
7_CD ._.
CONCLUSION_NN In_IN this_DT paper_NN ,_, we_PRP considered_VBD an_DT online_JJ scheduling_NN domain_NN for_IN which_WDT algorithms_NNS with_IN the_DT best_JJS possible_JJ competitive_JJ ratio_NN had_VBD been_VBN found_VBN ,_, but_CC for_IN which_WDT new_JJ solutions_NNS were_VBD required_VBN when_WRB the_DT setting_NN is_VBZ extended_VBN to_TO include_VB self-interested_JJ agents_NNS ._.
We_PRP presented_VBD a_DT mechanism_NN that_WDT is_VBZ incentive_NN compatible_JJ with_IN respect_NN to_TO release_VB time_NN ,_, deadline_NN ,_, length_NN and_CC value_NN ,_, and_CC that_IN only_RB increases_VBZ the_DT competitive_JJ ratio_NN by_IN one_CD ._.
We_PRP also_RB showed_VBD how_WRB this_DT mechanism_NN could_MD be_VB simplified_VBN when_WRB k_NN =_JJ #_# and_CC each_DT agent_NN can_MD not_RB lie_VB about_IN the_DT length_NN of_IN its_PRP$ job_NN ._.
We_PRP then_RB showed_VBD a_DT matching_VBG lower_JJR bound_VBN on_IN the_DT competitive_JJ ratio_NN that_WDT can_MD be_VB achieved_VBN by_IN a_DT deterministic_JJ mechanism_NN that_WDT never_RB pays_VBZ the_DT agents_NNS ._.
Several_JJ open_JJ problems_NNS remain_VBP in_IN this_DT setting_NN ._.
One_CD is_VBZ to_TO determine_VB whether_IN the_DT lower_JJR bound_VBN can_MD be_VB strengthened_VBN by_IN removing_VBG the_DT restriction_NN of_IN non-negative_JJ payments_NNS ._.
Also_RB ,_, while_IN we_PRP feel_VBP that_IN it_PRP is_VBZ reasonable_JJ to_TO strengthen_VB the_DT assumption_NN of_IN knowing_VBG the_DT maximum_NN possible_JJ ratio_NN of_IN value_NN densities_NNS -LRB-_-LRB- k_NN -RRB-_-RRB- to_TO knowing_VBG the_DT actual_JJ range_NN of_IN possible_JJ value_NN densities_NNS ,_, it_PRP would_MD be_VB interesting_JJ to_TO determine_VB whether_IN there_EX exists_VBZ a_DT -LRB-_-LRB- -LRB-_-LRB- #_# +_CC k_NN -RRB-_-RRB- #_# +_CC #_# -RRB-_-RRB- -_: competitive_JJ mechanism_NN under_IN the_DT original_JJ assumption_NN ._.
Finally_RB ,_, randomized_JJ mechanisms_NNS provide_VBP an_DT unexplored_JJ area_NN for_IN future_JJ work_NN ._.
8_CD ._.
REFERENCES_NNS -LSB-_-LRB- #_# -RSB-_-RRB- A_DT ._.
Archer_NNP ,_, J_NNP ._.
Feigenbaum_NNP ,_, A_NNP ._.
Krishnamurthy_NNP ,_, R_NN ._.
Sami_NNP ,_, and_CC S_NN ._.
Shenker_NNP ,_, Approximation_NN and_CC collusion_NN in_IN multicast_JJ cost_NN sharing_NN ,_, Games_NNPS and_CC Economic_NNP Behavior_NNP -LRB-_-LRB- to_TO appear_VB -RRB-_-RRB- ._.
-LSB-_-LRB- #_# -RSB-_-RRB- B_NN ._.
Awerbuch_NNP ,_, Y_NN ._.
Azar_NNP ,_, and_CC A_NN ._.
Meyerson_NNP ,_, Reducing_VBG truth-telling_JJ online_NN mechanisms_NNS to_TO online_JJ optimization_NN ,_, Proceedings_NNP on_IN the_DT 35th_JJ Symposium_NN on_IN the_DT Theory_NNP of_IN Computing_NNP ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- Z_NN ._.
Bar-Yossef_NNP ,_, K_NNP ._.
Hildrum_NNP ,_, and_CC F_NN ._.
Wu_NNP ,_, Incentive-compatible_JJ online_NN auctions_NNS for_IN digital_JJ goods_NNS ,_, Proceedings_NNP of_IN the_DT 13th_JJ Annual_JJ ACM-SIAM_NN Symposium_NN on_IN Discrete_NNP Algorithms_NNP ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- S_NN ._.
Baruah_NNP ,_, G_NNP ._.
Koren_NNP ,_, D_NNP ._.
Mao_NNP ,_, B_NN ._.
Mishra_NNP ,_, A_NNP ._.
Raghunathan_NNP ,_, L_NNP ._.
Rosier_JJR ,_, D_NN ._.
Shasha_NNP ,_, and_CC F_NN ._.
Wang_NNP ,_, On_IN the_DT competitiveness_NN of_IN on-line_JJ real-time_JJ task_NN scheduling_NN ,_, Journal_NNP of_IN Real-Time_NNP Systems_NNPS #_# -LRB-_-LRB- ####_CD -RRB-_-RRB- ,_, no_DT ._.
#_# ,_, 125-144_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- A_DT ._.
Blum_NNP ,_, T_NN ._.
Sandholm_NNP ,_, and_CC M_NN ._.
Zinkevich_NNP ,_, Online_NNP algorithms_NNS for_IN market_NN clearing_NN ,_, Proceedings_NNP of_IN the_DT 13th_JJ Annual_JJ ACM-SIAM_NN Symposium_NN on_IN Discrete_NNP Algorithms_NNP ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- A_DT ._.
Borodin_NNP and_CC R_NN ._.
El-Yaniv_NNP ,_, Online_NNP computation_NN and_CC competitive_JJ analysis_NN ,_, Cambridge_NNP University_NNP Press_NNP ,_, 1998_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- R_NN ._.
Buyya_NNP ,_, D_NNP ._.
Abramson_NNP ,_, J_NNP ._.
Giddy_JJ ,_, and_CC H_NN ._.
Stockinger_NNP ,_, Economic_NNP models_NNS for_IN resource_NN management_NN and_CC scheduling_NN in_IN grid_NN computing_NN ,_, The_DT Journal_NNP of_IN Concurrency_NNP and_CC Computation_NNP :_: Practice_NN and_CC Experience_NN ##_NN -LRB-_-LRB- ####_CD -RRB-_-RRB- ,_, 1507-1542_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- N_NN ._.
Camiel_NNP ,_, S_NN ._.
London_NNP ,_, N_NNP ._.
Nisan_NNP ,_, and_CC O_NN ._.
Regev_NNP ,_, The_DT popcorn_NN project_NN :_: Distributed_VBN computation_NN over_IN the_DT internet_NN in_IN java_NN ,_, 6th_JJ International_NNP World_NNP Wide_NN Web_NN Conference_NN ,_, ####_CD ._.
-LSB-_-LRB- #_# -RSB-_-RRB- J_NN ._.
Feigenbaum_NNP and_CC S_NN ._.
Shenker_NNP ,_, Distributed_VBN algorithmic_JJ mechanism_NN design_NN :_: Recent_JJ results_NNS and_CC future_JJ directions_NNS ,_, Proceedings_NNP of_IN the_DT 6th_JJ International_NNP Workshop_NNP on_IN Discrete_NNP Algorithms_NNPS and_CC Methods_NNS for_IN Mobile_NNP Computing_NNP and_CC Communications_NNP ,_, ####_CD ,_, pp_NN ._.
1-13_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- A_DT ._.
Fiat_NNP and_CC G_NNP ._.
Woeginger_NN -LRB-_-LRB- editors_NNS -RRB-_-RRB- ,_, Online_NN algorithms_NNS :_: The_DT state_NN of_IN the_DT art_NN ,_, Springer_NNP Verlag_NNP ,_, ####_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- E_NN ._.
Friedman_NNP and_CC D_NNP ._.
Parkes_NNP ,_, Pricing_NN wifi_NNS at_IN starbucksissues_NNS in_IN online_JJ mechanism_NN design_NN ,_, EC_NN ''_'' ##_NN ,_, ####_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- R_NN ._.
L_NN ._.
Graham_NNP ,_, Bounds_NNP for_IN certain_JJ multiprocessor_JJ anomalies_NNS ,_, Bell_NNP System_NNP Technical_NNP Journal_NNP ##_NN -LRB-_-LRB- ####_CD -RRB-_-RRB- ,_, 1563-1581_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- B_NN ._.
Kalyanasundaram_NNP and_CC K_NNP ._.
Pruhs_NNP ,_, Speed_NN is_VBZ as_IN powerful_JJ as_IN clairvoyance_NN ,_, Journal_NNP of_IN the_DT ACM_NNP ##_NN -LRB-_-LRB- ####_CD -RRB-_-RRB- ,_, 617-643_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- C_NN ._.
Koo_NNP ,_, T_NN ._.
Lam_NNP ,_, T_NN ._.
Ngan_NNP ,_, and_CC K_NN ._.
To_TO ,_, On-line_JJ scheduling_NN with_IN tight_JJ deadlines_NNS ,_, Theoretical_JJ Computer_NN Science_NN ###_CD -LRB-_-LRB- ####_CD -RRB-_-RRB- ,_, 251-261_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- G_NN ._.
Koren_NNP and_CC D_NNP ._.
Shasha_NNP ,_, D-over_NNP :_: An_DT optimal_JJ on-line_JJ scheduling_NN algorithm_NN for_IN overloaded_JJ real-time_JJ systems_NNS ,_, SIAM_NNP Journal_NNP of_IN Computing_NNP ##_NN -LRB-_-LRB- ####_CD -RRB-_-RRB- ,_, no_DT ._.
#_# ,_, 318-339_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- R_NN ._.
Lavi_NNP and_CC N_NNP ._.
Nisan_NNP ,_, Competitive_JJ analysis_NN of_IN online_JJ auctions_NNS ,_, EC_NNP ''_'' ##_NN ,_, ####_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- A_DT ._.
Mas-Colell_NNP ,_, M_NN ._.
Whinston_NNP ,_, and_CC J_NN ._.
Green_NNP ,_, Microeconomic_JJ theory_NN ,_, Oxford_NNP University_NNP Press_NNP ,_, ####_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- N_NN ._.
Nisan_NNP and_CC A_NNP ._.
Ronen_NNP ,_, Algorithmic_JJ mechanism_NN design_NN ,_, Games_NNPS and_CC Economic_NNP Behavior_NNP ##_NN -LRB-_-LRB- ####_CD -RRB-_-RRB- ,_, 166-196_CD ._.
-LSB-_-LRB- ##_NN -RSB-_-RRB- C_NN ._.
Papadimitriou_NNP ,_, Algorithms_NNP ,_, games_NNS ,_, and_CC the_DT internet_NN ,_, STOC_NN ,_, ####_CD ,_, pp_NN ._.
749-753_CD ._.
70_CD
